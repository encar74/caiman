/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/profile": {
    /**
     * Perfil de usuario 
     * @description Devuelve información de las empresas a las que se tiene acceso con las credenciales utilizadas en la identificación
     */
    get: operations["getProfile"];
  };
  "/{companyId}/contacts": {
    /**
     * Lista de contactos 
     * @description Devuelve una lista de contactos
     */
    get: operations["getContacts"];
    /**
     * Crear contacto 
     * @description Crea un nuevo contacto
     */
    post: operations["createContact"];
  };
  "/{companyId}/contacts/{id}": {
    /**
     * Obtener un contacto 
     * @description Obtiene el contenido de un contacto
     */
    get: operations["getContact"];
    /**
     * Actualizar contacto 
     * @description Actualiza un contacto existente
     */
    put: operations["updateContact"];
    /**
     * Borrar contacto 
     * @description Elimina un contacto existente
     */
    delete: operations["deleteContact"];
  };
  "/{companyId}/products": {
    /**
     * Lista de productos 
     * @description Devuelve una lista de productos
     */
    get: operations["getProducts"];
    /**
     * Crear producto 
     * @description Crea un nuevo producto
     */
    post: operations["createProduct"];
  };
  "/{companyId}/products/{id}": {
    /**
     * Obtener un producto 
     * @description Obtiene el contenido de un producto
     */
    get: operations["getProduct"];
    /**
     * Actualizar producto 
     * @description Actualiza un producto existente
     */
    put: operations["updateProduct"];
    /**
     * Borrar producto 
     * @description Elimina un producto existente
     */
    delete: operations["deleteProduct"];
  };
  "/{companyId}/invoices": {
    /**
     * Lista de facturas 
     * @description Devuelve una lista de facturas
     */
    get: operations["getInvoices"];
    /**
     * Crear factura 
     * @description Crea una nueva factura
     */
    post: operations["createInvoice"];
  };
  "/{companyId}/invoices/{id}": {
    /**
     * Obtener una factura 
     * @description Obtiene el contenido de una factura
     */
    get: operations["getInvoice"];
    /**
     * Actualizar factura 
     * @description Actualiza una factura existente
     */
    put: operations["updateInvoice"];
    /**
     * Borrar factura 
     * @description Elimina una factura existente
     */
    delete: operations["deleteInvoice"];
  };
  "/{companyId}/invoices/{id}/tags": {
    /**
     * Actualizar etiquetas de factura 
     * @description Actualiza las etiquetas de una factura existente
     */
    put: operations["updateInvoiceTags"];
  };
  "/{companyId}/invoices/{id}/send": {
    /**
     * Enviar factura por correo electrónico 
     * @description Envía la factura por correo electrónico con destinatarios, título y contenido obtenidos de su plantilla o bien valores personalizados indicados en la llamada
     */
    put: operations["sendInvoice"];
  };
  "/{companyId}/invoices/{id}/pdf": {
    /**
     * Generar la factura en formato PDF 
     * @description Solicita la generación del documento en formato PDF. Se devuelve una URL temporal desde la que poder descargar el documento en formato PDF
     */
    put: operations["createInvoicePDF"];
  };
  "/{companyId}/invoices/{id}/facturae": {
    /**
     * Generar la factura en formato facturae 
     * @description Solicita la generación del documento en formato facturae.
     *         
     * Se devuelve una URL desde la que poder descargar el documento en formato facturae.
     * 
     * El documento en formato facturae se generará en el momento solo si aún no ha sido generado o si ha habido cambios en el documento original desde la última vez que se creó en el formato indicado.
     */
    put: operations["createInvoiceFacturae"];
  };
  "/{companyId}/estimates": {
    /**
     * Lista de presupuestos 
     * @description Devuelve una lista de presupuestos
     */
    get: operations["getEstimates"];
    /**
     * Crear presupuesto 
     * @description Crea un nuevo presupuesto
     */
    post: operations["createEstimate"];
  };
  "/{companyId}/estimates/{id}": {
    /**
     * Obtener un presupuesto 
     * @description Obtiene el contenido de un presupuesto
     */
    get: operations["getEstimate"];
    /**
     * Actualizar presupuesto 
     * @description Actualiza un presupuesto existente
     */
    put: operations["updateEstimate"];
    /**
     * Borrar presupuesto 
     * @description Elimina un presupuesto existente
     */
    delete: operations["deleteEstimate"];
  };
  "/{companyId}/estimates/{id}/tags": {
    /**
     * Actualizar etiquetas de presupuesto 
     * @description Actualiza las etiquetas de un presupuesto existente
     */
    put: operations["updateEstimateTags"];
  };
  "/{companyId}/estimates/{id}/send": {
    /**
     * Enviar presupuesto por correo electrónico 
     * @description Envía el presupuesto por correo electrónico con destinatarios, título y contenido obtenidos de su plantilla o bien valores personalizados indicados en la llamada
     */
    put: operations["sendEstimate"];
  };
  "/{companyId}/estimates/{id}/pdf": {
    /**
     * Generar el presupuesto en formato PDF 
     * @description Solicita la generación del documento en formato PDF. Se devuelve una URL temporal desde la que poder descargar el documento en formato PDF
     */
    put: operations["createEstimatePDF"];
  };
  "/{companyId}/deliveryNotes": {
    /**
     * Lista de albaranes 
     * @description Devuelve una lista de albaranes
     */
    get: operations["getDeliveryNotes"];
    /**
     * Crear albarán 
     * @description Crea un nuevo albarán
     */
    post: operations["createDeliveryNote"];
  };
  "/{companyId}/deliveryNotes/{id}": {
    /**
     * Obtener un albarán 
     * @description Obtiene el contenido de un albarán
     */
    get: operations["getDeliveryNote"];
    /**
     * Actualizar albarán 
     * @description Actualiza un albarán existente
     */
    put: operations["updateDeliveryNote"];
    /**
     * Borrar albarán 
     * @description Elimina un albarán existente
     */
    delete: operations["deleteDeliveryNote"];
  };
  "/{companyId}/deliveryNotes/{id}/tags": {
    /**
     * Actualizar etiquetas de albarán 
     * @description Actualiza las etiquetas de un albarán existente
     */
    put: operations["updateDeliveryNoteTags"];
  };
  "/{companyId}/deliveryNotes/{id}/send": {
    /**
     * Enviar albarán por correo electrónico 
     * @description Envía el albarán por correo electrónico con destinatarios, título y contenido obtenidos de su plantilla o bien valores personalizados indicados en la llamada
     */
    put: operations["sendDeliveryNote"];
  };
  "/{companyId}/deliveryNotes/{id}/pdf": {
    /**
     * Generar el albarán en formato PDF 
     * @description Solicita la generación del documento en formato PDF. Se devuelve una URL temporal desde la que poder descargar el documento en formato PDF
     */
    put: operations["createDeliveryNotePDF"];
  };
  "/{companyId}/bills": {
    /**
     * Lista de facturas de compra o tickets 
     * @description Devuelve una lista de facturas de compra o tickets
     */
    get: operations["getBills"];
  };
  "/{companyId}/bills/{id}": {
    /**
     * Obtener una factura de compra o ticket 
     * @description Obtiene el contenido de una factura de compra o ticket
     */
    get: operations["getBill"];
  };
  "/{companyId}/banks": {
    /**
     * Lista de bancos 
     * @description Devuelve una lista de los bancos y cuentas de tesorería disponibles en la empresa
     */
    get: operations["getBanks"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * AccountCode 
     * @description Número de cuenta contable
     */
    AccountCode: string;
    /** Attachments */
    Attachments: ({
        name: string;
        url: string;
        size?: number;
        /** Format: date-time */
        creationTime: string;
        contentType?: string;
        /** @enum {string} */
        contentSubtype?: "facturae" | "inboxEmailBody";
        imagePreviewUrl?: string;
      })[];
    /** Bank */
    Bank: {
      /** @enum {string} */
      type?: "bank";
      uuid?: string;
      main: {
        title?: string;
        /** @enum {string} */
        subtype: "other" | "iban" | "card";
        name: string;
        iban?: string;
        bic?: string;
        currency: string;
        account: components["schemas"]["AccountCode"];
        /** @description Últimos 4 dígitos del IBAN de esta cuenta (Solo para cuentas son subtype="iban") */
        iban4?: string;
      };
    };
    /** BankResponse */
    BankResponse: {
      content: components["schemas"]["Bank"];
      creationDate: components["schemas"]["CreationDate"];
      modificationDate: components["schemas"]["ModificationDate"];
    };
    /** Bill */
    Bill: {
      uuid: string;
      /** @enum {string} */
      type: "bill";
      accounting?: components["schemas"]["Accounting"];
      books?: components["schemas"]["Books"];
      attachments?: components["schemas"]["Attachments"];
      /**
       * BillImport 
       * @description Información interna del origen de la factura de compra o ticket
       */
      import?: Record<string, never>;
      /** BillMain */
      main: {
        /** @enum {string} */
        subtype?: "ticket";
        account: components["schemas"]["AccountCode"];
        fiscalPosition: components["schemas"]["FiscalPosition"];
        contact: string | null;
        /** @description Moneda de los importes de la factura de compra o ticket (Formato ISO 4217) */
        currency: string;
        /** Format: date */
        date: string | null;
        /** Format: date */
        transactionDate?: string | null;
        depreciable?: boolean;
        depreciationSettings?: components["schemas"]["DepreciationSettings"];
        nonDeductibleInIRPF?: boolean;
        /** Format: date */
        dueDate: string | null;
        exchangeRate?: number;
        /** BillLines */
        lines?: (components["schemas"]["BillLine"])[];
        manualAccounting?: components["schemas"]["BillMainManualAccounting"];
        lineTotalDecimals?: number;
        linesTotal?: number;
        /** @enum {string} */
        mode?: "totalProvided" | "calcTotal";
        notes?: string;
        paymentMethod?: string | null;
        referenceNumber?: string;
        showProductColumn?: boolean;
        showQuantityColumn?: boolean;
        showDiscountColumn?: boolean;
        taxes?: components["schemas"]["PurchasesDocumentTaxes"];
        total: number;
        pendingBeforeAccounting?: number;
        companyCurrencyTotal?: number;
        totalBeforeTaxes?: number;
        companyCurrencyTotalBeforeTaxes?: number;
        /** @description País de la dirección fiscal del contacto (Formato ISO 3166-1 Alpha-2) */
        country?: string | null;
        zipcode?: string | null;
        taxIncludedPrices?: boolean;
        title?: string;
        correctedBill?: string;
        manualTotals?: boolean;
        task?: string;
      };
    };
    /** BillDepreciationSettings */
    DepreciationSettings: {
      maxRate: number;
      /** Format: date */
      startDepreciationDate?: string;
      /** Format: date */
      earlyDisposalDate?: string;
      accumulatedDepreciationAccount?: components["schemas"]["AccountCode"];
      provisioningDepreciationAccount?: components["schemas"]["AccountCode"];
      /** Depreciations */
      depreciations?: (components["schemas"]["DepreciationEntry"])[];
    };
    /** BillDepreciationSettingsEntry */
    DepreciationEntry: {
      /** Format: date */
      date: string;
      amount: number;
      currencyAmount: number;
      currency: string;
    };
    /** BillLine */
    BillLine: {
      id?: string;
      text?: string;
      account?: components["schemas"]["AccountCode"];
      document?: string;
      lineTotal?: number;
      /** @enum {boolean} */
      nonDeductibleTax?: true;
      tax?: (components["schemas"]["TaxId"])[];
      discount?: number;
      discountRate?: number;
      quantity?: number;
      unitPrice?: number;
    };
    /**
     * BillMainManualAccounting 
     * @description Contabilidad manual de la factura.
     * 
     * En este elemento pueden indicarse las líneas que se genearán en la contabilidad para esta factura a excepción de las del total del documento y las de impuestos que son generadas automáticamente por el programa
     */
    BillMainManualAccounting: {
      /** BillMainManualAccountingLines */
      lines: (components["schemas"]["AccountingLine"])[];
    };
    /** BillResponse */
    BillResponse: {
      content: components["schemas"]["Bill"];
      tags: components["schemas"]["Tags"];
      creationDate: components["schemas"]["CreationDate"];
      modificationDate: components["schemas"]["ModificationDate"];
      /** BillRelated */
      related?: {
        /**
         * BillRelatedObjects 
         * @description Mapa de objetos relacionados solicitados, cada clave de este objeto es el id de un objeto relacionado y el valor es el contenido del mismo
         */
        objects?: {
          object_id?: components["schemas"]["TaxDefinition"];
        };
      };
    };
    /**
     * BillWrite 
     * @description Versión simplificada de la factura de compra o ticket sin los elementos que calcula automáticamente FacturaDirecta
     */
    BillWrite: {
      uuid: string;
      /** @enum {string} */
      type: "bill";
      /** BillMain */
      main: {
        /** @enum {string} */
        subtype?: "ticket";
        account: components["schemas"]["AccountCode"];
        fiscalPosition: components["schemas"]["FiscalPosition"];
        contact: string | null;
        /** @description Moneda de los importes de la factura de compra o ticket (Formato ISO 4217) */
        currency: string;
        /** Format: date */
        date: string | null;
        /** Format: date */
        transactionDate?: string | null;
        depreciable?: boolean;
        depreciationSettings?: components["schemas"]["DepreciationSettings"];
        nonDeductibleInIRPF?: boolean;
        /** Format: date */
        dueDate: string | null;
        exchangeRate?: number;
        /** BillLines */
        lines?: (components["schemas"]["BillLine"])[];
        manualAccounting?: components["schemas"]["BillMainManualAccounting"];
        lineTotalDecimals?: number;
        linesTotal?: number;
        /** @enum {string} */
        mode?: "totalProvided" | "calcTotal";
        notes?: string;
        paymentMethod?: string | null;
        referenceNumber?: string;
        showProductColumn?: boolean;
        showQuantityColumn?: boolean;
        showDiscountColumn?: boolean;
        taxes?: components["schemas"]["PurchasesDocumentTaxes"];
        total: number;
        pendingBeforeAccounting?: number;
        companyCurrencyTotal?: number;
        totalBeforeTaxes?: number;
        companyCurrencyTotalBeforeTaxes?: number;
        /** @description País de la dirección fiscal del contacto (Formato ISO 3166-1 Alpha-2) */
        country?: string | null;
        zipcode?: string | null;
        taxIncludedPrices?: boolean;
        title?: string;
        correctedBill?: string;
        manualTotals?: boolean;
        task?: string;
      };
    };
    /** Contact */
    Contact: {
      /** @enum {string} */
      type?: "contact";
      uuid?: string;
      attachments?: components["schemas"]["Attachments"];
      /**
       * ContactImport 
       * @description Información interna del origen del contacto
       */
      import?: Record<string, never>;
      /** ContactMain */
      main: {
        /**
         * @description Atributo "Mostrar como" o "Nombre comercial".
         * 					
         * Puedes indicar aquí el nombre comercial del contacto o el nombre fiscal con algún añadido si lo necesitas para identificarlo correctamente.
         * 
         * Este campo se genera automáticamente a partir del nombre fiscal si se guarda el contacto sin este valor indicado.
         */
        title?: string;
        /** @description Nombre fiscal del contacto para empresas o primer nombre para personas físicas */
        name: string;
        /** @description Apellidos del contacto. Debe indicarse solo para personas físicas */
        surname?: string;
        email?: string;
        phone?: string;
        /** @description Detalles de la dirección: calle, número, anexos... (Solo para contactos españoles) */
        address?: string;
        /** @description Código postal (Solo para clientes españoles) */
        zipcode?: string;
        /** @description Localidad (Solo para clientes españoles) */
        city?: string;
        /** @description Código de provincia (Solo disponible para contactos españoles). Calculado automáticamente */
        region?: string;
        /** @description País de la dirección fiscal del contacto (Formato ISO 3166-1 Alpha-2) */
        country: string;
        /** @description Esta dirección se calcula automáticamente para contactos con país España a partir del resto de atributos y es la única que debe rellenarse para contactos de otros países. */
        fullAddress?: string;
        /**
         * @description Identificador fiscal del contacto.
         * 					
         * Para contatos españoles se valida el formato del mismo y debe ser introducido sin ningún separador ni caracter para dar formato
         */
        fiscalId?: string;
        notes?: string;
        website?: string;
        contaplusCode?: string;
        /**
         * Accounts 
         * @description Cuentas contables del contacto en los diferentes roles:
         * 
         * * client: Cuenta cuando actúa como cliente (habitualmente 430000)
         * * clientCredit: Cuenta de anticipos cuando actúa como cliente (habitualmente 438000)
         * * provider: Cuenta cuando actúa como proveedor (habitualmente 400000 o 410000)
         * * providerCredit: Cuenta de anticipos cuando actúa como proveedor (habitualmente 407000)
         * * employee: Cuenta cuanto actúa como empleado (habitualmente 465000)
         * * employeeCredit: Cuenta de anticipos cuanto actúa como empleado (habitualmente 460000)
         * * providerDefaultPurchases: Cuenta de gastos de un proveedor (habitualmente 600000)
         */
        accounts: {
          client?: components["schemas"]["AccountCode"];
          provider?: components["schemas"]["AccountCode"];
          clientCredit?: components["schemas"]["AccountCode"];
          providerCredit?: components["schemas"]["AccountCode"];
          employee?: components["schemas"]["AccountCode"];
          employeeCredit?: components["schemas"]["AccountCode"];
          providerDefaultPurchases?: components["schemas"]["AccountCode"];
        };
        /** @description Moneda por defecto del contacto (Formato ISO 4217) */
        currency: string;
        vatEU?: string;
        /**
         * VATEUValidation 
         * @description Información de validación del NIF intracomunitario
         */
        vatEUValidation?: {
          /** @description Indica si el NIF intracomunitario ha sido validado y es válido */
          valid: boolean;
          /** @description Cuando el NIF intracomunitario no está indicado como válido este atributo es true cuando el NIF no se pudo validar porque el servicio de validación no estaba disponible en el momento de hacer la validación, el NIF podría ser válido en ese caso pero no se ha verificado. */
          serviceAvailable?: boolean;
          /**
           * Format: date-time 
           * @description Fecha y hora en la que se hizo la comprobación de la validez del NIF intracomunitario.
           */
          date: string;
        };
        sendPaymentMethod?: string | null;
        receivePaymentMethod?: string | null;
        receiveDueDateDelta?: number;
        /**
         * @description Primer día preferido de pago del cliente.
         * 
         * Valores especiales: 
         * * 0: Cualquier día
         * * -1: Último día del mes
         */
        receiveMonthDay?: number;
        /**
         * @description Segundo día preferido de pago del cliente.
         * 
         * Valores especiales: 
         * * 0: Cualquier día
         * * -1: Último día del mes
         */
        receiveMonthDay2?: number;
        dir3?: components["schemas"]["ContactMainDir3"];
        endCustomer?: boolean;
        /**
         * FiscalPositions 
         * @description Posiciones fiscales del contacto en los diferentes roles:
         * 
         * * sales: Posición fiscal cuando actúa como cliente
         * * purchases: Posición fiscal cuando actúa como proveedor
         */
        fiscalPositions?: {
          sales?: components["schemas"]["FiscalPosition"];
          purchases?: components["schemas"]["FiscalPosition"];
        };
      };
    };
    /** ContactMainDir3 */
    ContactMainDir3: {
      fiscal?: components["schemas"]["ContactMainDir3Centre"];
      receptor?: components["schemas"]["ContactMainDir3Centre"];
      pagador?: components["schemas"]["ContactMainDir3Centre"];
      comprador?: components["schemas"]["ContactMainDir3Centre"];
    };
    /** ContactMainDir3Centre */
    ContactMainDir3Centre: {
      centreCode?: string;
    };
    /** ContactResponse */
    ContactResponse: {
      content: components["schemas"]["Contact"];
      creationDate: components["schemas"]["CreationDate"];
      modificationDate: components["schemas"]["ModificationDate"];
      /** ContactRelated */
      related?: {
        /**
         * ContactRelatedObjects 
         * @description Mapa de objetos relacionados solicitados, cada clave de este objeto es el id de un objeto relacionado y el valor es el contenido del mismo
         */
        objects?: {
          object_id?: components["schemas"]["PaymentMethodResponse"];
        };
        /**
         * ContactPaymentMethods 
         * @description Array de ids de los métodos de pago de este contacto. Los objetos completos estarán disponibles en related.objects[id]
         */
        paymentMethods?: (string)[];
      };
    };
    /**
     * ContactWrite 
     * @description Versión simplificada del contacto con los elementos que calcula automáticamente FacturaDirecta marcados como no obligatorios
     */
    ContactWrite: {
      /** @enum {string} */
      type?: "contact";
      uuid?: string;
      attachments?: components["schemas"]["Attachments"];
      /**
       * ContactImport 
       * @description Información interna del origen del contacto
       */
      import?: Record<string, never>;
      /** ContactMain */
      main: {
        /**
         * @description Atributo "Mostrar como" o "Nombre comercial".
         * 					
         * Puedes indicar aquí el nombre comercial del contacto o el nombre fiscal con algún añadido si lo necesitas para identificarlo correctamente.
         * 
         * Este campo se genera automáticamente a partir del nombre fiscal si se guarda el contacto sin este valor indicado.
         */
        title?: string;
        /** @description Nombre fiscal del contacto para empresas o primer nombre para personas físicas */
        name: string;
        /** @description Apellidos del contacto. Debe indicarse solo para personas físicas */
        surname?: string;
        email?: string;
        phone?: string;
        /** @description Detalles de la dirección: calle, número, anexos... (Solo para contactos españoles) */
        address?: string;
        /** @description Código postal (Solo para clientes españoles) */
        zipcode?: string;
        /** @description Localidad (Solo para clientes españoles) */
        city?: string;
        /** @description Código de provincia (Solo disponible para contactos españoles). Calculado automáticamente */
        region?: string;
        /** @description País de la dirección fiscal del contacto (Formato ISO 3166-1 Alpha-2) */
        country: string;
        /** @description Esta dirección se calcula automáticamente para contactos con país España a partir del resto de atributos y es la única que debe rellenarse para contactos de otros países. */
        fullAddress?: string;
        /**
         * @description Identificador fiscal del contacto.
         * 					
         * Para contatos españoles se valida el formato del mismo y debe ser introducido sin ningún separador ni caracter para dar formato
         */
        fiscalId?: string;
        notes?: string;
        website?: string;
        contaplusCode?: string;
        /**
         * Accounts 
         * @description Cuentas contables del contacto en los diferentes roles:
         * 
         * * client: Cuenta cuando actúa como cliente (habitualmente 430000)
         * * clientCredit: Cuenta de anticipos cuando actúa como cliente (habitualmente 438000)
         * * provider: Cuenta cuando actúa como proveedor (habitualmente 400000 o 410000)
         * * providerCredit: Cuenta de anticipos cuando actúa como proveedor (habitualmente 407000)
         * * employee: Cuenta cuanto actúa como empleado (habitualmente 465000)
         * * employeeCredit: Cuenta de anticipos cuanto actúa como empleado (habitualmente 460000)
         * * providerDefaultPurchases: Cuenta de gastos de un proveedor (habitualmente 600000)
         */
        accounts: {
          client?: components["schemas"]["AccountCode"];
          provider?: components["schemas"]["AccountCode"];
          clientCredit?: components["schemas"]["AccountCode"];
          providerCredit?: components["schemas"]["AccountCode"];
          employee?: components["schemas"]["AccountCode"];
          employeeCredit?: components["schemas"]["AccountCode"];
          providerDefaultPurchases?: components["schemas"]["AccountCode"];
        };
        /** @description Moneda por defecto del contacto (Formato ISO 4217) */
        currency: string;
        vatEU?: string;
        /**
         * VATEUValidation 
         * @description Información de validación del NIF intracomunitario
         */
        vatEUValidation?: {
          /** @description Indica si el NIF intracomunitario ha sido validado y es válido */
          valid: boolean;
          /** @description Cuando el NIF intracomunitario no está indicado como válido este atributo es true cuando el NIF no se pudo validar porque el servicio de validación no estaba disponible en el momento de hacer la validación, el NIF podría ser válido en ese caso pero no se ha verificado. */
          serviceAvailable?: boolean;
          /**
           * Format: date-time 
           * @description Fecha y hora en la que se hizo la comprobación de la validez del NIF intracomunitario.
           */
          date: string;
        };
        sendPaymentMethod?: string | null;
        receivePaymentMethod?: string | null;
        receiveDueDateDelta?: number;
        /**
         * @description Primer día preferido de pago del cliente.
         * 
         * Valores especiales: 
         * * 0: Cualquier día
         * * -1: Último día del mes
         */
        receiveMonthDay?: number;
        /**
         * @description Segundo día preferido de pago del cliente.
         * 
         * Valores especiales: 
         * * 0: Cualquier día
         * * -1: Último día del mes
         */
        receiveMonthDay2?: number;
        dir3?: components["schemas"]["ContactMainDir3"];
        endCustomer?: boolean;
        /**
         * FiscalPositions 
         * @description Posiciones fiscales del contacto en los diferentes roles:
         * 
         * * sales: Posición fiscal cuando actúa como cliente
         * * purchases: Posición fiscal cuando actúa como proveedor
         */
        fiscalPositions?: {
          sales?: components["schemas"]["FiscalPosition"];
          purchases?: components["schemas"]["FiscalPosition"];
        };
      };
    };
    /**
     * CreationDate 
     * Format: date-time 
     * @description Fecha de creación del objeto en el sistema
     */
    CreationDate: string;
    /** DeliveryNote */
    DeliveryNote: {
      uuid: string;
      /** @enum {string} */
      type: "deliveryNote";
      attachments?: components["schemas"]["Attachments"];
      /** DeliveryNoteMain */
      main: {
        title?: string;
        fiscalPosition: components["schemas"]["FiscalPosition"];
        account: components["schemas"]["AccountCode"];
        /**
         * @description Estado base del albarán, este es el estado que se elige en el propio documento. El estado final del mismo puede ser distinto si existen documentos relacionados 
         * @enum {string}
         */
        baseState: "pending" | "delivered" | "closed" | "rejected";
        /** Format: date */
        deliveredDate?: string;
        deliveredTo?: string;
        /** Format: date */
        rejectedDate?: string;
        rejectedBy?: string;
        address?: string;
        /** @description País de la dirección fiscal del contacto (Formato ISO 3166-1 Alpha-2) */
        country?: string | null;
        zipcode?: string | null;
        contact?: string | null;
        /** @description Moneda de los importes del albarán (Formato ISO 4217) */
        currency: string;
        /** Format: date */
        date: string | null;
        docNumber: components["schemas"]["DocNumber"];
        /** Format: date */
        dueDate: string | null;
        emails?: string;
        emailsCc?: string;
        emailsBcc?: string;
        exchangeRate: number;
        /** DeliveryNoteLines */
        lines: (components["schemas"]["DeliveryNoteMainLine"])[];
        lineTotalDecimals: number;
        /** @description Notas visibles del albarán */
        notes?: string | null;
        showProductColumn?: boolean;
        showQuantityColumn?: boolean;
        showDiscountColumn?: boolean;
        /** @description Importe total de las líneas. Calculado automáticamente */
        linesTotal: number;
        taxes: components["schemas"]["SalesDocumentTaxes"];
        taxIncludedPrices: boolean;
        manualTotals?: boolean;
        /** @description Importe total antes de impuestos. Calculado automáticamente */
        totalBeforeTaxes?: number;
        /** @description Importe total antes de impuestos en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotalBeforeTaxes?: number;
        paymentMethod?: string | null;
        theme: string;
        total: number;
        /** @description Importe total en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotal?: number;
        /** @description Notas internas del albarán, no serán visibles en el documento impreso */
        internalNotes?: string;
        /** @enum {string} */
        taxCalculationMode?: "total" | "lines";
      };
      /**
       * DeliveryNoteImport 
       * @description Información interna del origen del presupuesto
       */
      import?: Record<string, never>;
    };
    /** DeliveryNoteMainLine */
    DeliveryNoteMainLine: {
      origin?: string | null;
      account: components["schemas"]["AccountCode"];
      /** @description Indica aquí el ID del documento de origen de esta línea si proviene de otro documento para que los documentos queden enlazados */
      document?: string;
      discount: number;
      discountRate: number;
      lineTotal: number;
      quantity: number;
      /** DeliveryNoteLineTaxes */
      tax?: (components["schemas"]["TaxId"])[];
      text: string;
      unitPrice: number;
    };
    /**
     * DeliveryNoteMainLineWrite 
     * @description Versión de la línea de albarán para creación del documento
     */
    DeliveryNoteMainLineWrite: {
      origin?: string | null;
      account?: components["schemas"]["AccountCode"];
      /** @description Indica aquí el ID del documento de origen de esta línea si proviene de otro documento para que los documentos queden enlazados */
      document?: string;
      discount?: number;
      discountRate?: number;
      lineTotal?: number;
      quantity: number;
      /** DeliveryNoteLineTaxes */
      tax?: (components["schemas"]["TaxId"])[];
      text: string;
      unitPrice: number;
    };
    /** DeliveryNoteResponse */
    DeliveryNoteResponse: {
      content: components["schemas"]["DeliveryNote"];
      tags: components["schemas"]["Tags"];
      creationDate: components["schemas"]["CreationDate"];
      modificationDate: components["schemas"]["ModificationDate"];
      /** DeliveryNoteRelated */
      related?: {
        /**
         * DeliveryNoteRelatedObjects 
         * @description Mapa de objetos relacionados solicitados, cada clave de este objeto es el id de un objeto relacionado y el valor es el contenido del mismo
         */
        objects?: {
          object_id?: components["schemas"]["TaxDefinition"];
        };
      };
    };
    /**
     * DeliveryNoteWrite 
     * @description Versión simplificada del albarán con los elementos que calcula automáticamente FacturaDirecta marcados como no obligatorios
     */
    DeliveryNoteWrite: {
      uuid?: string;
      /** @enum {string} */
      type: "deliveryNote";
      attachments?: components["schemas"]["Attachments"];
      /** DeliveryNoteMain */
      main: {
        title?: string;
        fiscalPosition?: components["schemas"]["FiscalPosition"];
        account?: components["schemas"]["AccountCode"];
        /**
         * @description Estado base del albarán, este es el estado que se elige en el propio documento. El estado final del mismo puede ser distinto si existen documentos relacionados 
         * @enum {string}
         */
        baseState: "pending" | "delivered" | "closed" | "rejected";
        /** Format: date */
        deliveredDate?: string;
        deliveredTo?: string;
        /** Format: date */
        rejectedDate?: string;
        rejectedBy?: string;
        address?: string;
        /** @description País de la dirección fiscal del contacto (Formato ISO 3166-1 Alpha-2) */
        country?: string | null;
        zipcode?: string | null;
        contact?: string | null;
        /** @description Moneda de los importes del albarán (Formato ISO 4217) */
        currency?: string;
        /** Format: date */
        date?: string | null;
        docNumber: components["schemas"]["DocNumber"];
        /** Format: date */
        dueDate?: string | null;
        emails?: string;
        emailsCc?: string;
        emailsBcc?: string;
        exchangeRate?: number;
        /** DeliveryNoteLines */
        lines: (components["schemas"]["DeliveryNoteMainLineWrite"])[];
        lineTotalDecimals?: number;
        /** @description Notas visibles del albarán */
        notes?: string | null;
        showProductColumn?: boolean;
        showQuantityColumn?: boolean;
        showDiscountColumn?: boolean;
        /** @description Importe total de las líneas. Calculado automáticamente */
        linesTotal?: number;
        taxes?: components["schemas"]["SalesDocumentTaxes"];
        taxIncludedPrices?: boolean;
        /** @description Importe total antes de impuestos. Calculado automáticamente */
        totalBeforeTaxes?: number;
        /** @description Importe total antes de impuestos en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotalBeforeTaxes?: number;
        paymentMethod?: string | null;
        theme?: string;
        total?: number;
        /** @description Importe total en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotal?: number;
        /** @description Notas internas del albarán, no serán visibles en el documento impreso */
        internalNotes?: string;
        /** @enum {string} */
        taxCalculationMode?: "total" | "lines";
      };
      /**
       * DeliveryNoteImport 
       * @description Información interna del origen del presupuesto
       */
      import?: Record<string, never>;
    };
    /**
     * DocumentAccounting 
     * @description Asiento contable generado por el documento
     */
    Accounting: {
      /** Format: date */
      date: string | null;
      isMaintenance?: boolean;
      /** @enum {number} */
      journalPriority?: 1 | 2 | 3 | 100 | 970 | 980 | 990 | 999;
      /** DocumentAccountingLines */
      lines: (components["schemas"]["AccountingLine"])[];
    };
    /**
     * DocumentAccountingLine 
     * @description Apunte contable individual
     */
    AccountingLine: {
      account: components["schemas"]["AccountCode"];
      /** @description Referencia al documento que define la subcuenta de este apunte */
      document?: string | null;
      /** @description Importe en el DEBE en la moneda de la contabilidad de la empresa */
      debit: number | null;
      /** @description Importe en el HABER en la moneda de la contabilidad de la empresa */
      credit: number | null;
      /** @description Importe en el DEBE en la moneda original del apunte */
      currencyDebit: number | null;
      /** @description Importe en el HABER en la moneda original del apunte */
      currencyCredit: number | null;
      /** @description Moneda original del apunte (Formato ISO 4217) */
      currency: string;
    };
    /** DocumentBooks */
    Books: {
      111?: components["schemas"]["BooksCellModel"];
      115?: components["schemas"]["BooksCellModel"];
      130?: components["schemas"]["BooksCellModel"];
      180?: components["schemas"]["BooksCellModel"];
      190?: components["schemas"]["BooksCellModel"];
      303?: components["schemas"]["BooksCellModel"];
      347?: components["schemas"]["BooksCellModel"];
      349?: components["schemas"]["BooksCellModel"];
      390?: components["schemas"]["BooksCellModel"];
    };
    /** DocumentBooksCellModel */
    BooksCellModel: {
      manual: boolean;
      /** Format: date */
      date: string;
      /**
       * BookCells 
       * @description Datos de las distintas celdas que componen el modelo
       */
      cells: Record<string, never>;
    };
    /** DocumentNumber */
    DocNumber: {
      /** @description Número secuencial del documento */
      number?: number | null;
      /** @description Serie del documento */
      series: string;
      /**
       * @description Plantilla de la serie del documento.
       * 
       * Se pueden usar los siguientes valores:
       * * \#\# para indicar el año actual con 2 dígitos
       * * \#\#\#\# para indicar el año actual con 4 dígitos
       */
      formattedSeries?: string;
    };
    /** DocumentTaxesPurchases */
    PurchasesDocumentTaxes: ({
        id: string;
        base: number;
        companyCurrencyBase: number;
        amount: number;
        companyCurrencyAmount: number;
        /** @enum {boolean} */
        nonDeductible?: true;
      })[];
    /** DocumentTaxesSales */
    SalesDocumentTaxes: ({
        id: string;
        base: number;
        companyCurrencyBase: number;
        amount: number;
        companyCurrencyAmount: number;
      })[];
    /** Estimate */
    Estimate: {
      uuid: string;
      /** @enum {string} */
      type: "estimate";
      attachments?: components["schemas"]["Attachments"];
      /** EstimateMain */
      main: {
        title?: string;
        /**
         * @description Estado base del presupuesto, este es el estado que se elige en el propio documento. El estado final del mismo puede ser distinto si existen documentos relacionados 
         * @enum {string}
         */
        baseState: "pending" | "closed" | "accepted" | "rejected";
        /** Format: date */
        acceptedDate?: string;
        acceptedBy?: string;
        /** Format: date */
        rejectedDate?: string;
        rejectedBy?: string;
        address?: string;
        /** @description País de la dirección fiscal del contacto (Formato ISO 3166-1 Alpha-2) */
        country?: string | null;
        zipcode?: string | null;
        contact?: string | null;
        account: components["schemas"]["AccountCode"];
        fiscalPosition: components["schemas"]["FiscalPosition"];
        /** @description Moneda de los importes del presupuesto (Formato ISO 4217) */
        currency: string;
        /** Format: date */
        date: string | null;
        docNumber: components["schemas"]["DocNumber"];
        /** Format: date */
        dueDate: string | null;
        emails?: string;
        emailsCc?: string;
        emailsBcc?: string;
        exchangeRate: number;
        /** EstimateLines */
        lines: (components["schemas"]["EstimateMainLine"])[];
        lineTotalDecimals: number;
        /** @description Notas visibles del presupuesto */
        notes?: string | null;
        showProductColumn?: boolean;
        showQuantityColumn?: boolean;
        showDiscountColumn?: boolean;
        /** @description Importe total de las líneas. Calculado automáticamente */
        linesTotal: number;
        taxes: components["schemas"]["SalesDocumentTaxes"];
        taxIncludedPrices: boolean;
        manualTotals?: boolean;
        /** @description Importe total antes de impuestos. Calculado automáticamente */
        totalBeforeTaxes?: number;
        /** @description Importe total antes de impuestos en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotalBeforeTaxes?: number;
        paymentMethod?: string | null;
        theme: string;
        total: number;
        /** @description Importe total en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotal?: number;
        isProforma?: boolean;
        /** @description Notas internas del presupuesto, no serán visibles en el documento impreso */
        internalNotes?: string;
        /** @enum {string} */
        taxCalculationMode?: "total" | "lines";
      };
      /**
       * EstimateImport 
       * @description Información interna del origen del presupuesto
       */
      import?: Record<string, never>;
    };
    /** EstimateMainLine */
    EstimateMainLine: {
      account: components["schemas"]["AccountCode"];
      /** @description Indica aquí el ID del documento de origen de esta línea si proviene de otro documento para que los documentos queden enlazados */
      document?: string;
      discount: number;
      discountRate: number;
      lineTotal: number;
      quantity: number;
      /** EstimateLineTaxes */
      tax?: (components["schemas"]["TaxId"])[];
      text: string;
      unitPrice: number;
    };
    /**
     * EstimateMainLineWrite 
     * @description Versión de la línea de presupuesto para creación del documento
     */
    EstimateMainLineWrite: {
      account?: components["schemas"]["AccountCode"];
      /** @description Indica aquí el ID del documento de origen de esta línea si proviene de otro documento para que los documentos queden enlazados */
      document?: string;
      discount?: number;
      discountRate?: number;
      lineTotal?: number;
      quantity: number;
      /** EstimateLineTaxes */
      tax?: (components["schemas"]["TaxId"])[];
      text: string;
      unitPrice: number;
    };
    /** EstimateResponse */
    EstimateResponse: {
      content: components["schemas"]["Estimate"];
      tags: components["schemas"]["Tags"];
      creationDate: components["schemas"]["CreationDate"];
      modificationDate: components["schemas"]["ModificationDate"];
      /** EstimateRelated */
      related?: {
        /**
         * EstimateRelatedObjects 
         * @description Mapa de objetos relacionados solicitados, cada clave de este objeto es el id de un objeto relacionado y el valor es el contenido del mismo
         */
        objects?: {
          object_id?: components["schemas"]["TaxDefinition"];
        };
      };
    };
    /**
     * EstimateWrite 
     * @description Versión simplificada del presupuesto con los elementos que calcula automáticamente FacturaDirecta marcados como no obligatorios
     */
    EstimateWrite: {
      uuid?: string;
      /** @enum {string} */
      type: "estimate";
      attachments?: components["schemas"]["Attachments"];
      /** EstimateMain */
      main: {
        title?: string;
        /**
         * @description Estado base del presupuesto, este es el estado que se elige en el propio documento. El estado final del mismo puede ser distinto si existen documentos relacionados 
         * @enum {string}
         */
        baseState: "pending" | "closed" | "accepted" | "rejected";
        /** Format: date */
        acceptedDate?: string;
        acceptedBy?: string;
        /** Format: date */
        rejectedDate?: string;
        rejectedBy?: string;
        address?: string;
        /** @description País de la dirección fiscal del contacto (Formato ISO 3166-1 Alpha-2) */
        country?: string | null;
        zipcode?: string | null;
        contact?: string | null;
        account?: components["schemas"]["AccountCode"];
        fiscalPosition?: components["schemas"]["FiscalPosition"];
        /** @description Moneda de los importes del presupuesto (Formato ISO 4217) */
        currency?: string;
        /** Format: date */
        date?: string | null;
        docNumber: components["schemas"]["DocNumber"];
        /** Format: date */
        dueDate?: string | null;
        emails?: string;
        emailsCc?: string;
        emailsBcc?: string;
        exchangeRate?: number;
        /** EstimateLines */
        lines: (components["schemas"]["EstimateMainLineWrite"])[];
        lineTotalDecimals?: number;
        /** @description Notas visibles del presupuesto */
        notes?: string | null;
        showProductColumn?: boolean;
        showQuantityColumn?: boolean;
        showDiscountColumn?: boolean;
        /** @description Importe total de las líneas. Calculado automáticamente */
        linesTotal?: number;
        taxes?: components["schemas"]["SalesDocumentTaxes"];
        taxIncludedPrices?: boolean;
        /** @description Importe total antes de impuestos. Calculado automáticamente */
        totalBeforeTaxes?: number;
        /** @description Importe total antes de impuestos en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotalBeforeTaxes?: number;
        paymentMethod?: string | null;
        theme?: string;
        total?: number;
        /** @description Importe total en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotal?: number;
        isProforma?: boolean;
        /** @description Notas internas del presupuesto, no serán visibles en el documento impreso */
        internalNotes?: string;
        /** @enum {string} */
        taxCalculationMode?: "total" | "lines";
      };
      /**
       * EstimateImport 
       * @description Información interna del origen del presupuesto
       */
      import?: Record<string, never>;
    };
    /**
     * FiscalPosition 
     * @description Posición fiscal del contacto
     * 
     * * emp: Empresa nacional (cliente) | Empresa nacional (proveedor)
     * * emp_ic: Empresa intracomunitaria (cliente) | Empresa intracomunitaria (proveedor)
     * * emp_ic_novies: Empresa intracomunitaria no VIES (cliente) | Empresa intracomunitaria no VIES	(proveedor)
     * * emp_ex: Empresa extracomunitaria (cliente) | Empresa extracomunitaria (proveedor)
     * * emp_isp: Empresa nacional a la que emito facturas ISP (cliente) | Empresa nacional que emite facturas ISP (proveedor)
     * * ind: Cliente final nacional (cliente)
     * * ind_ic: Cliente final intracomunitario (cliente)
     * * ind_ex: Cliente final extracomunitario (cliente)
     * * aut: Autónomo (cliente) | Autónomo que emite facturas sin retencion (proveedor)
     * * aut_re: Autónomo en régimen de Recargo de Equivalencia (cliente)
     * * aut_irpf_24: Autónomo que me emite facturas con retencion 24% IRPF	(proveedor)
     * * aut_irpf_19: Autónomo que me emite facturas con retencion 19% IRPF	(proveedor)
     * * aut_irpf_15: Autónomo que me emite facturas con retencion 15% IRPF	(proveedor)
     * * aut_irpf_7: Autónomo que me emite facturas con retencion 7% IRPF	(proveedor)
     * * aut_irpf_2: Autónomo que me emite facturas con retencion 2% IRPF	(proveedor)
     * * aut_irpf_1: Autónomo que me emite facturas con retencion 1% IRPF	(proveedor)
     * * aut_irpf_19_urbano: Persona que me emite facturas con retencion 19% IRPF en concepto de alquiler urbano	(proveedor)
     *  
     * @enum {string}
     */
    FiscalPosition: "emp" | "emp_ic" | "emp_ic_novies" | "emp_ex" | "emp_isp" | "ind" | "ind_ic" | "ind_ex" | "aut" | "aut_re" | "aut_irpf_24" | "aut_irpf_19" | "aut_irpf_15" | "aut_irpf_7" | "aut_irpf_2" | "aut_irpf_1" | "aut_irpf_19_urbano";
    /** Invoice */
    Invoice: {
      uuid: string;
      /** @enum {string} */
      type: "invoice";
      accounting?: components["schemas"]["Accounting"];
      books?: components["schemas"]["Books"];
      attachments?: components["schemas"]["Attachments"];
      /** InvoiceMain */
      main: {
        title?: string;
        address?: string;
        /** @description País de la dirección fiscal del contacto (Formato ISO 3166-1 Alpha-2) */
        country?: string | null;
        zipcode?: string | null;
        contact?: string | null;
        account: components["schemas"]["AccountCode"];
        fiscalPosition: components["schemas"]["FiscalPosition"];
        /** @description Moneda de los importes de la factura (Formato ISO 4217) */
        currency: string;
        /** Format: date */
        date: string | null;
        docNumber: components["schemas"]["DocNumber"];
        /** Format: date */
        dueDate: string | null;
        /** @description Lista de emails separados por comas de los destinatarios a los que se enviará por defecto esta factura */
        emails?: string;
        /** @description Lista de emails separados por comas de los destinatarios a los que se enviará por defecto en copia visible esta factura */
        emailsCc?: string;
        /** @description Lista de emails separados por comas de los destinatarios a los que se enviará por defecto en copia oculta esta factura */
        emailsBcc?: string;
        exchangeRate: number;
        /**
         * InvoiceLines 
         * @description Líneas de la factura
         */
        lines: (components["schemas"]["InvoiceMainLine"])[];
        manualAccounting?: components["schemas"]["InvoiceMainManualAccounting"];
        lineTotalDecimals: number;
        /** @description Notas visibles de la factura */
        notes?: string | null;
        showProductColumn?: boolean;
        showDiscountColumn?: boolean;
        showQuantityColumn?: boolean;
        /** @description Importe total de las líneas. Calculado automáticamente */
        linesTotal: number;
        taxes: components["schemas"]["SalesDocumentTaxes"];
        taxIncludedPrices: boolean;
        /** @description Importe total antes de impuestos. Calculado automáticamente */
        totalBeforeTaxes?: number;
        manualTotals?: boolean;
        /** @description Importe total antes de impuestos en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotalBeforeTaxes?: number;
        paymentMethod?: string | null;
        theme: string;
        total: number;
        pendingBeforeAccounting?: number;
        /** @description Importe total en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotal?: number;
        correctedInvoice?: string;
        facturae?: components["schemas"]["InvoiceMainFacturae"];
        externalId?: string;
        installments?: (components["schemas"]["InvoiceMainInstallment"])[];
        /** @description Notas internas de la factura, no serán visibles en el documento impreso */
        internalNotes?: string;
        /** @description Indica si la factura es provisional (true) o definitiva (false). Cuando creamos una factura si no se indica la factura se creará como provisional o definitiva según la configuración de la empresa. */
        draft: boolean;
        /** @description Indica si es una factura anulada */
        voided: boolean;
        /** @enum {string} */
        taxCalculationMode?: "total" | "lines";
        ticketbai?: components["schemas"]["InvoiceMainTicketbai"];
      };
      /**
       * InvoiceImport 
       * @description Información interna del origen de la factura
       */
      import?: Record<string, never>;
      /**
       * InvoiceMeta 
       * @description Metadatos internos de la factura
       */
      meta?: {
        readonly ticketbai?: components["schemas"]["InvoiceMetaTicketbai"];
      };
    };
    /**
     * InvoiceMainFacturaeAdministrativeCentre 
     * @description Atributos de un centro administrativo para Facturae
     */
    InvoiceMainFacturaeAdministrativeCentre: {
      CentreCode?: string;
      RoleTypeCode?: string;
      Name?: string;
      FirstSurname?: string;
      SecondSurname?: string;
      Address?: string;
      PostCode?: string;
      Town?: string;
      Province?: string;
      CountryCode?: string;
      PostCodeAndTown?: string;
      Telephone?: string;
      TeleFax?: string;
      WebAddress?: string;
      ElectronicMail?: string;
      ContactPersons?: string;
      CnoCnae?: string;
      INETownCode?: string;
      AdditionalContactDetails?: string;
      PhysicalGLN?: string;
      LogicalOperationalPoint?: string;
      CentreDescription?: string;
    };
    /** InvoiceMainInstallment */
    InvoiceMainInstallment: {
      /** Format: date */
      date: string;
      amount: number;
      /** @description Moneda de los importes del vencimiento (Formato ISO 4217) */
      currency: string;
    };
    /**
     * InvoiceMainLine 
     * @description Línea de la factura
     */
    InvoiceMainLine: {
      /** @description Indica aquí el ID del documento de origen de esta línea si proviene de otro documento para que los documentos queden enlazados */
      origin?: string | null;
      account: components["schemas"]["AccountCode"];
      /** @description Si esta línea se ha generado a partir de un producto puedes indicar aquí su ID */
      document?: string;
      discount: number;
      discountRate: number;
      lineTotal: number;
      quantity: number;
      /** InvoiceLineTaxes */
      tax: (components["schemas"]["TaxId"])[];
      text: string;
      unitPrice: number;
      facturae?: components["schemas"]["InvoiceMainLineFacturae"];
    };
    /** InvoiceMainLineFacturae */
    InvoiceMainLineFacturae: {
      /** @description Referencia del contrato del Emisor */
      IssuerContractReference?: string;
      /**
       * Format: date 
       * @description Fecha asociada al atributo IssuerContractReference en formato yyyy-mm-dd
       */
      IssuerContractDate?: string;
      /** @description Referencia de la Operación, Número de Pedido, Contrato, etc. del Emisor */
      IssuerTransactionReference?: string;
      /**
       * Format: date 
       * @description Fecha asociada al atributo IssuerTransactionReference en format yyyy-mm-dd
       */
      IssuerTransactionDate?: string;
      /** @description Referencia del contrato del Receptor */
      ReceiverContractReference?: string;
      /**
       * Format: date 
       * @description Fecha asociada al atributo ReceiverContractDate en formato yyyy-mm-dd
       */
      ReceiverContractDate?: string;
      /** @description Referencia de la Operación, Número de Pedido, Contrato, etc. del Receptor */
      ReceiverTransactionReference?: string;
      /**
       * Format: date 
       * @description Fecha asociada al atributo ReceiverTransactionReference en formato yyyy-mm-dd
       */
      ReceiverTransactionDate?: string;
      /** @description Referencia del expediente */
      FileReference?: string;
      /**
       * Format: date 
       * @description Fecha asociada al atributo FileReference en formato yyyy-mm-dd
       */
      FileDate?: string;
      /** @description Referencias de albaranes */
      DeliveryNotesReferences?: ({
          /** @description Número de referencia del albarán */
          DeliveryNoteNumber: string;
          /**
           * Format: date 
           * @description Fecha asociada al atributo DeliveryNoteNumber en formato yyyy-mm-dd
           */
          DeliveryNoteDate?: string;
        })[];
      /** @description Número de secuencia o línea del pedido */
      SequenceNumber?: number;
      /** @description Periodo de prestación */
      LineItemPeriod?: {
        /**
         * Format: date 
         * @description Fecha de inicio en formato yyyy-mm-dd
         */
        StartDate: string;
        /**
         * Format: date 
         * @description Fecha de fin en formato yyyy-mm-dd
         */
        EndDate: string;
      };
    };
    /** InvoiceMainLineFacturae */
    InvoiceMainFacturae: {
      LegalReference?: string;
      InvoicingPeriod?: {
        /** Format: date */
        StartDate: string;
        /** Format: date */
        EndDate: string;
      };
      Buyer_ContactPersons?: string;
      AdministrativeCentre_01?: components["schemas"]["InvoiceMainFacturaeAdministrativeCentre"];
      AdministrativeCentre_02?: components["schemas"]["InvoiceMainFacturaeAdministrativeCentre"];
      AdministrativeCentre_03?: components["schemas"]["InvoiceMainFacturaeAdministrativeCentre"];
      AdministrativeCentre_04?: components["schemas"]["InvoiceMainFacturaeAdministrativeCentre"];
      AdministrativeCentre_05?: components["schemas"]["InvoiceMainFacturaeAdministrativeCentre"];
      AdministrativeCentre_06?: components["schemas"]["InvoiceMainFacturaeAdministrativeCentre"];
      AdministrativeCentre_07?: components["schemas"]["InvoiceMainFacturaeAdministrativeCentre"];
      AdministrativeCentre_08?: components["schemas"]["InvoiceMainFacturaeAdministrativeCentre"];
      AdministrativeCentre_09?: components["schemas"]["InvoiceMainFacturaeAdministrativeCentre"];
    };
    /**
     * InvoiceMainLineWrite 
     * @description Versión de la línea de factura para creación del documento
     */
    InvoiceMainLineWrite: {
      /** @description Indica aquí el ID del documento de origen de esta línea si proviene de otro documento para que los documentos queden enlazados */
      origin?: string | null;
      account?: components["schemas"]["AccountCode"];
      /** @description Si esta línea se ha generado a partir de un producto puedes indicar aquí su ID */
      document?: string;
      discount?: number;
      discountRate?: number;
      lineTotal?: number;
      quantity: number;
      /** InvoiceLineTaxes */
      tax: (components["schemas"]["TaxId"])[];
      text: string;
      unitPrice: number;
      facturae?: components["schemas"]["InvoiceMainLineFacturae"];
    };
    /**
     * InvoiceMainManualAccounting 
     * @description Contabilidad manual de la factura.
     * 
     * En este elemento pueden indicarse las líneas que se genearán en la contabilidad para esta factura a excepción de las del total del documento y las de impuestos que son generadas automáticamente por el programa
     */
    InvoiceMainManualAccounting: {
      /** InvoiceMainManualAccountingLines */
      lines: (components["schemas"]["AccountingLine"])[];
    };
    /**
     * InvoiceMainTicketbai 
     * @description Parámetros de ajustes para TicketBAI
     */
    InvoiceMainTicketbai: {
      /** @enum {string} */
      causaExencion?: "E1" | "E2" | "E3" | "E4" | "E5" | "E6";
      /** @enum {string} */
      causaNoSujeta?: "OT" | "RL";
      /** @enum {string} */
      claveTipoFacturaRectificativa?: "R1" | "R2" | "R3" | "R4" | "R5";
    };
    /**
     * InvoiceMetaTicketbai 
     * @description Información interna relativa a TicketBAI
     */
    InvoiceMetaTicketbai: {
      identificador: string;
      ordenEncadenamiento: number;
      /** @enum {string} */
      diputacionForal: "Araba" | "Bizkaia" | "Gipuzkoa";
      mustBeSent: boolean;
      sent: boolean;
      /**
       * XmlModelAlta 
       * @description Modelo interno del contenido del XML de alta de TicketBAI
       */
      xmlModel: Record<string, never>;
      /** @description Contenido del XML de alta de TicketBAI */
      xml: string;
      qrUrl?: string;
      qr?: string;
      /** EncadenamientoFactura */
      encadenamientoFactura: {
        SerieFacturaAnterior?: string;
        NumFacturaAnterior: number;
        FechaExpedicionFacturaAnterior: string;
        SignatureValueFirmaFacturaAnterior: string;
      };
      /**
       * VoidedInvoice 
       * @description Información de TicketBAI relativa a la anulación de la factura
       */
      voided?: {
        mustBeSent: boolean;
        sent: boolean;
        /**
         * XmlModelAnulacion 
         * @description Modelo interno del contenido del XML de anulación de TicketBAI
         */
        xmlModel: Record<string, never>;
        /** @description Contenido del XML de anulación de TicketBAI */
        xml: string;
      };
      /**
       * ZuzenduAlta 
       * @description Información de TicketBAI relativa a la modificación/subsanación de la factura mediante el servicio Zuzendu
       */
      zuzenduAlta?: {
        /**
         * XmlModelAlta 
         * @description Modelo interno del contenido del XML de alta Zuzendu de TicketBAI
         */
        xmlModel: Record<string, never>;
        /** @description Contenido del XML de alta Zuzendu de TicketBAI */
        xml: string;
      };
    };
    /** InvoiceResponse */
    InvoiceResponse: {
      content: components["schemas"]["Invoice"];
      tags: components["schemas"]["Tags"];
      creationDate: components["schemas"]["CreationDate"];
      modificationDate: components["schemas"]["ModificationDate"];
      /** InvoiceRelated */
      related?: {
        /**
         * InvoiceRelatedObjects 
         * @description Mapa de objetos relacionados solicitados, cada clave de este objeto es el id de un objeto relacionado y el valor es el contenido del mismo
         */
        objects?: {
          object_id?: components["schemas"]["TaxDefinition"];
        };
        /**
         * InvoiceBalance 
         * @description Saldo abierto de la factura.
         * 
         * Se devuelve el saldo contable de la factura, por lo que el importe pendiente de cobrar se muestra como un valor negativo. El valor es negativo porque "falta" dinero conabilizado para que la factura esté saldada. El importe se indica en la moneda de la factura en el elemento `currencyBalance` y en la moneda de la contabilidad de la empresa en el elemento `balance`
         * 
         * ```
         * {
         *   "balance": {
         *     "balance": -28.56, 
         *     "currency": "USD", 
         *     "currencyBalance": -30.52
         *   }
         * }
         * ```
         * 
         * El ejemplo anterior corresponde a una factura contabilizada en USD que tiene un importe pendiente de 30,52 USD que están contabilizados como 28,56 EUR.
         * 
         * En general para saber el importe pendiente de cobrar de una factura debe utilizarse por tanto el elemento `currencyBalance` que es el que representa el saldo pendiente en la moneda en la que se ha emitido la factura.
         */
        balance?: {
          /** @description Saldo pendiente de la factura en EUR */
          balance: number;
          /** @description Moneda original del saldo pendiente de la factura (Formato ISO 4217) */
          currency: string;
          /** @description Saldo pendiente de la factura en la moneda de la factura */
          currencyBalance: number;
        };
      };
    };
    /**
     * InvoiceWrite 
     * @description Versión simplificada de la factura con los elementos que calcula automáticamente FacturaDirecta marcados como no obligatorios
     */
    InvoiceWrite: {
      uuid?: string;
      /** @enum {string} */
      type: "invoice";
      accounting?: components["schemas"]["Accounting"];
      books?: components["schemas"]["Books"];
      attachments?: components["schemas"]["Attachments"];
      /** InvoiceMain */
      main: {
        title?: string;
        address?: string;
        /** @description País de la dirección fiscal del contacto (Formato ISO 3166-1 Alpha-2) */
        country?: string | null;
        zipcode?: string | null;
        contact?: string | null;
        account?: components["schemas"]["AccountCode"];
        fiscalPosition?: components["schemas"]["FiscalPosition"];
        /** @description Moneda de los importes de la factura (Formato ISO 4217) */
        currency?: string;
        /** Format: date */
        date?: string | null;
        docNumber: components["schemas"]["DocNumber"];
        /** Format: date */
        dueDate?: string | null;
        /** @description Lista de emails separados por comas de los destinatarios a los que se enviará por defecto esta factura */
        emails?: string;
        /** @description Lista de emails separados por comas de los destinatarios a los que se enviará por defecto en copia visible esta factura */
        emailsCc?: string;
        /** @description Lista de emails separados por comas de los destinatarios a los que se enviará por defecto en copia oculta esta factura */
        emailsBcc?: string;
        exchangeRate?: number;
        /**
         * InvoiceLines 
         * @description Líneas de la factura
         */
        lines: (components["schemas"]["InvoiceMainLineWrite"])[];
        manualAccounting?: components["schemas"]["InvoiceMainManualAccounting"];
        lineTotalDecimals?: number;
        /** @description Notas visibles de la factura */
        notes?: string | null;
        showProductColumn?: boolean;
        showDiscountColumn?: boolean;
        showQuantityColumn?: boolean;
        /** @description Importe total de las líneas. Calculado automáticamente */
        linesTotal?: number;
        taxes?: components["schemas"]["SalesDocumentTaxes"];
        taxIncludedPrices?: boolean;
        /** @description Importe total antes de impuestos. Calculado automáticamente */
        totalBeforeTaxes?: number;
        /** @description Importe total antes de impuestos en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotalBeforeTaxes?: number;
        paymentMethod?: string | null;
        theme?: string;
        total?: number;
        pendingBeforeAccounting?: number;
        /** @description Importe total en la moneda de la contabilidad. Calculado automáticamente */
        companyCurrencyTotal?: number;
        correctedInvoice?: string;
        facturae?: components["schemas"]["InvoiceMainFacturae"];
        externalId?: string;
        installments?: (components["schemas"]["InvoiceMainInstallment"])[];
        /** @description Notas internas de la factura, no serán visibles en el documento impreso */
        internalNotes?: string;
        /** @description Indica si la factura es provisional (true) o definitiva (false). Cuando creamos una factura si no se indica la factura se creará como provisional o definitiva según la configuración de la empresa. */
        draft?: boolean;
        /** @description Indica si es una factura anulada */
        voided?: boolean;
        /** @enum {string} */
        taxCalculationMode?: "total" | "lines";
        ticketbai?: components["schemas"]["InvoiceMainTicketbai"];
      };
      /**
       * InvoiceImport 
       * @description Información interna del origen de la factura
       */
      import?: Record<string, never>;
      /**
       * InvoiceMeta 
       * @description Metadatos internos de la factura
       */
      meta?: {
        readonly ticketbai?: components["schemas"]["InvoiceMetaTicketbai"];
      };
    };
    /**
     * ModificationDate 
     * Format: date-time 
     * @description Fecha de la última modificación del objeto en el sistema
     */
    ModificationDate: string;
    /**
     * Pagination 
     * @description Información de paginación de la consulta realizada
     */
    Pagination: {
      limit: number;
      offset: number;
      total: number;
    };
    /** PaymentMethod */
    PaymentMethod: {
      uuid: string;
      /** @enum {string} */
      type: "paymentMethod";
      attachments?: components["schemas"]["Attachments"];
      /**
       * PaymentMethodImport 
       * @description Información interna del origen del método de pago
       */
      import?: Record<string, never>;
      /** PaymentMethodMain */
      main: {
        title: string;
        /** @enum {string} */
        direction?: "send" | "receive";
        bank?: string;
        contact?: string | null;
        /** @enum {string} */
        subtype: "manual" | "sepaDirectDebit" | "sepaCreditTransfer";
        /** PaymentMethodDetails */
        details: OneOf<[Record<string, never>, {
          id: string;
          /** Format: date */
          signatureDate: string | null;
          /** @enum {string} */
          instrument: "B2B" | "CORE";
          recurrent: boolean;
          iban: string;
          bic: string;
        }, {
          iban: string;
          bic: string;
        }]>;
      };
    };
    /** PaymentMethodResponse */
    PaymentMethodResponse: {
      content: components["schemas"]["PaymentMethod"];
      creationDate: components["schemas"]["CreationDate"];
      modificationDate: components["schemas"]["ModificationDate"];
    };
    /** Product */
    Product: {
      /** @enum {string} */
      type?: "product";
      uuid?: string;
      /** ProductMain */
      main: {
        /** @description Título del producto. Calculado automáticamente */
        title?: string;
        name: string;
        sku?: string;
        /** ProductSales */
        sales?: {
          price?: number;
          description?: string;
          /** ProductSalesTaxes */
          tax: (components["schemas"]["TaxId"])[];
          account: components["schemas"]["AccountCode"];
        };
        /** ProductPurchases */
        purchases?: {
          price?: number;
          description?: string;
          /** ProductPurchsesTaxes */
          tax: (components["schemas"]["TaxId"])[];
          account: components["schemas"]["AccountCode"];
          depreciable?: boolean;
        };
        /** @description Moneda de los precios del producto (Formato ISO 4217) */
        currency: string;
      };
      /**
       * Productmport 
       * @description Información interna del origen del producto
       */
      import?: Record<string, never>;
    };
    /**
     * ProductWrite 
     * @description Versión simplificada del producto con los elementos que calcula automáticamente FacturaDirecta marcados como no obligatorios
     */
    ProductWrite: {
      /** @enum {string} */
      type?: "product";
      uuid?: string;
      /** ProductMain */
      main: {
        /** @description Título del producto. Calculado automáticamente */
        title?: string;
        name: string;
        sku?: string;
        /** ProductSales */
        sales?: {
          price?: number;
          description?: string;
          /** ProductSalesTaxes */
          tax: (components["schemas"]["TaxId"])[];
          account: components["schemas"]["AccountCode"];
        };
        /** ProductPurchases */
        purchases?: {
          price?: number;
          description?: string;
          /** ProductPurchsesTaxes */
          tax: (components["schemas"]["TaxId"])[];
          account: components["schemas"]["AccountCode"];
          depreciable?: boolean;
        };
        /** @description Moneda de los precios del producto (Formato ISO 4217) */
        currency: string;
      };
      /**
       * Productmport 
       * @description Información interna del origen del producto
       */
      import?: Record<string, never>;
    };
    /** ProfileCompany */
    ProfileCompany: {
      id: string;
      name: string;
      taxCode: string;
      brand?: string;
      owner: string;
      role: string;
    };
    /** ProfileUser */
    ProfileUser: {
      username: string;
      email: string;
      firstName: string;
      lastName: string;
      /** Companies */
      companies: (components["schemas"]["ProfileCompany"])[];
    };
    /**
     * Tags 
     * @description Etiquetas del documento
     */
    Tags: (string)[];
    /**
     * TagsOperation 
     * @description Tipo de operación con las etiquetas del documento. Es obligatorio si se indica el elemento 'tags' y la operación es de actualización 
     * @enum {string}
     */
    TagsOperation: "add" | "remove" | "replace";
    /** TaxDefinition */
    TaxDefinition: {
      /** @enum {string} */
      type: "taxDefinition";
      id: components["schemas"]["TaxId"];
      title: string;
      value: number;
      current?: boolean;
      /** @enum {string} */
      taxGroup: "IVA" | "VATEU" | "IRPF" | "IPSI" | "IGIC" | "IVA_RE" | "OTHER";
    };
    /**
     * TaxId 
     * @description Identificador interno de un impuesto
     */
    TaxId: string;
  };
  responses: {
    /** @description Respuesta de error cuando no se intenta realizar una operación sin la información de autorización o con información de autorización incorrecta, como por ejemplo un token oAuth caducado. */
    UnauthorizedError: {
      content: {
        "application/json": {
          /** @enum {integer} */
          statusCode: 401;
          message: string;
        };
      };
    };
    /** @description Respuesta de error cuando se intenta realizar una operación para la que el usuario no tiene permiso, bien sea por su rol dentro del programa o por el scope seleccionado en la identificacón de la API. */
    ForbiddenError: {
      content: {
        "application/json": {
          /** @enum {integer} */
          statusCode: 403;
          message: string;
        };
      };
    };
    /** @description Respuesta de error cuando no se encuentra un documento en una consulta o actualización */
    NotFoundError: {
      content: {
        "application/json": {
          /** @enum {integer} */
          statusCode: 404;
          message: string;
        };
      };
    };
    /** @description Respuesta de error cuando no se envía una petición con parámetros o formato incorrecto */
    BadRequestError: {
      content: {
        "application/json": {
          /** @enum {integer} */
          statusCode: 400;
          message: string;
          type?: string;
          errors?: (Record<string, never>)[];
        };
      };
    };
    /**
     * @description Respuesta de error cuando no se puede realizar la operación por un conflicto con el estado del recurso o por discordancia entre la URL de la petición y el contenido de la misma.
     *       
     * Ejemplo: Cuado intentamos crear un documento indicando un ID de otro que ya existe
     */
    ConflictError: {
      content: {
        "application/json": {
          /** @enum {integer} */
          statusCode: 409;
          message: string;
        };
      };
    };
    /**
     * @description Respuesta de error cuando se produce un error inesperado en el servidor.
     *       
     * Si recibes este error, por favor contacta con el soporte de FacturaDirecta
     */
    InternalServerError: {
      content: {
        "application/json": {
          /** @enum {integer} */
          statusCode: 500;
          message: string;
        };
      };
    };
    /** @description Resultado de borrado de un elemento */
    DeleteResponse: {
      content: {
        "application/json": {
          result: boolean;
        };
      };
    };
    /** @description Resultado del envío de una factura */
    SendInvoiceResponse: {
      content: {
        "application/json": {
          /** @description Remitente usado para el envío */
          from: string;
          /** @description Destinatario al que se ha enviado el documento */
          to: (string)[];
          /** @description Destinatario al que se ha enviado en copia visible el documento */
          cc?: (string)[];
          /** @description Destinatarios al que se ha enviado en copia oculta el documento */
          bcc?: (string)[];
          /** @description Indica si se ha incluido la factura en formato facturae */
          sentFacturae: boolean;
        };
      };
    };
    /** @description Resultado del envío de un documento */
    SendDocumentResponse: {
      content: {
        "application/json": {
          /** @description Remitente usado para el envío */
          from: string;
          /** @description Destinatario al que se ha enviado el documento */
          to: (string)[];
          /** @description Destinatario al que se ha enviado en copia visible el documento */
          cc?: (string)[];
          /** @description Destinatarios al que se ha enviado en copia oculta el documento */
          bcc?: (string)[];
        };
      };
    };
    /** @description Resultado de la petición de generación de un PDF temporal de un documento */
    GetDocumentPDFResponse: {
      content: {
        "application/json": {
          /** @description URL desde la que descargar o visualizar el archivo solicitado. Puede apuntar a un documento PDF (modos de descarga o visualización) o a un documento HTML (modo impresión). */
          url: string;
          /** @description Nombre del archivo PDF generado. Este nombre es el que enviará el servidor a través de la cabecera Content-Disposition si se intenta descargar el documento PDF. */
          filename: string;
          /**
           * Format: date-time 
           * @description Fecha y hora hasta la que estará disponible el documento generado.
           */
          availableUntil: string;
          /** @description URL desde la que descargar el archivo con la factura en formato PDF cuando se ha solictiado el modo impresión, para otros modos no se recibe este elemento. */
          urlPdf?: string;
        };
      };
    };
  };
  parameters: {
    /** @description Número de versión de la API. Valor por defecto: `0.8.0` */
    "Accept-Version": string;
    /** @description ID de la empresa */
    CompanyId: string;
    /** @description Número máximo de resultados, valores permitidos entre 1 y 500 */
    Limit: number;
    /** @description Posición de inicio de los resultados. Utilizado para paginar */
    Offset: number;
  };
  requestBodies: {
    /**
     * @description Definición del envío del documento.
     * 
     * Pueden omitirse todos los elementos y se enviará el documento a los destinatarios incluidos en el mismo en los elementos "emails", "emailsCc" o "emailsBcc"; y con el título y contenido del mensaje de la plantilla del documento.
     * 
     * Si se indica cualquiera de los siguientes elementos en la llamada ("to", "cc" o "bcc") se ignorarán los emails indicados en los elementos "emails", "emailsCc" o "emailsBcc" del documento.
     * 
     * En cualquier caso debe existir al menos un destinatario al que enviar el documento (con independencia de que haya o no destinatarios en copia visible u oculta).
     * 
     * En caso de que no se pueda determinar ningún destinatario la llamada fallará con un error 409.
     */
    SendInvoiceRequest: {
      content: {
        "application/json": {
          /**
           * @description Email remitente del envío ("From"), debe ser uno de los remitentes dados de alta en la configuración de la emprea. Si no se indica se utilizará el primer remitente disponible en la configuración de la empresa.
           * 
           * Si no se indica y no existiera ningún remitente configurado en la empresa la llamada fallará con un error 409.
           */
          from?: string;
          /** @description Destinatarios del envío del documento */
          to?: (string)[];
          /** @description Destinatarios en copia visible del envío del documento */
          cc?: (string)[];
          /** @description Destinatarios en copia oculta del envío del documento */
          bcc?: (string)[];
          /** @description Título del mensaje enviado. Si no se indica se utiliza el de la plantilla del documento */
          subject?: string;
          /** @description Contenido en formato HTML del mensaje enviado. Si no se indica se utiliza el de la plantilla del documento */
          html?: string;
          /** @description Incluir en el envío también la factura en formato facturae. */
          sendFacturae?: boolean;
          /**
           * @description Indica el comportamiento cuando se solicita el envío de facturae y esta no puede generarse por algún motivo.
           * 
           * Si se indica "true" el envío se realizará normalmente aunque no se pueda genear la factura en formato factura, si se indica "false" (el valor por defecto) la llamada fallará con un error 409 si se ha solicitado el envío de facturae y esta no puede generarse.
           * 
           * Este elemento es ignorado si no se ha solicitado el envío de facturae.
           */
          continueWithoutFacturae?: boolean;
        };
      };
    };
    /**
     * @description Definición del envío del documento.
     * 
     * Pueden omitirse todos los elementos y se enviará el documento a los destinatarios incluidos en el mismo en los elementos "emails", "emailsCc" o "emailsBcc"; y con el título y contenido del mensaje de la plantilla del documento.
     * 
     * Si se indica cualquiera de los siguientes elementos en la llamada ("to", "cc" o "bcc") se ignorarán los emails indicados en los elementos "emails", "emailsCc" o "emailsBcc" del documento.
     * 
     * En cualquier caso debe existir al menos un destinatario al que enviar el documento (con independencia de que haya o no destinatarios en copia visible u oculta).
     * 
     * En caso de que no se pueda determinar ningún destinatario la llamada fallará con un error 409.
     */
    SendDocumentRequest: {
      content: {
        "application/json": {
          /**
           * @description Email remitente del envío ("From"), debe ser uno de los remitentes dados de alta en la configuración de la emprea. Si no se indica se utilizará el primer remitente disponible en la configuración de la empresa.
           * 
           * Si no se indica y no existiera ningún remitente configurado en la empresa la llamada fallará con un error 409.
           */
          from?: string;
          /** @description Destinatarios del envío del documento */
          to?: (string)[];
          /** @description Destinatarios en copia visible del envío del documento */
          cc?: (string)[];
          /** @description Destinatarios en copia oculta del envío del documento */
          bcc?: (string)[];
          /** @description Título del mensaje enviado. Si no se indica se utiliza el de la plantilla del documento */
          subject?: string;
          /** @description Contenido en formato HTML del mensaje enviado. Si no se indica se utiliza el de la plantilla del documento */
          html?: string;
        };
      };
    };
    /**
     * @description Solicitud de creación de una versión en PDF de un documento.
     * 
     * Se obtendrá una URL temporal que será válida durante el tiempo indicado en la respuesta.
     * 
     * Se puede solicitar para distintos modos de uso:
     * 
     * * **attachment**: Se recibe una URL de un archivo que se descargará como adjunto
     * * **inline**: Se recibe una URL de un archivo que se descargará para visualiar en línea
     * * **print**: Se recibe una URL de un archivo HTML que se puede visualizar en línea y carga el documento en formato PDF y lo envía a imprimir. Adicionalmente se recibe también la url del documento en formado PDF para visualización en línea
     */
    CreateDocumentPDFRequest: {
      content: {
        "application/json": {
          /**
           * @description Modo de respuesta solicitada: adjunto (attachment), visualización en línea (inline) o impresión (print) 
           * @enum {string}
           */
          mode?: "attachment" | "inline" | "print";
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  getProfile: {
    /**
     * Perfil de usuario 
     * @description Devuelve información de las empresas a las que se tiene acceso con las credenciales utilizadas en la identificación
     */
    responses: {
      /** @description Información del usuario */
      200: {
        content: {
          "application/json": {
            profile: components["schemas"]["ProfileUser"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getContacts: {
    /**
     * Lista de contactos 
     * @description Devuelve una lista de contactos
     */
    parameters?: {
        /** @description País de la dirección fiscal del contacto (Formato ISO 3166-1 Alpha-2) */
        /** @description Búsqueda aproximada por nombre (incluyendo apellidos y "mostrar cómo"/"nombre comercial"), email y NIF */
        /** @description NIF o identificador fiscal del contacto */
        /** @description Número de IVA intracomunitario del contacto */
        /** @description Contacto con rol de cliente */
        /** @description Contacto con rol de proveedor */
        /** @description Contacto con rol de empleado */
        /**
         * @description Orden de los resultados
         * 
         * Puedes indicar varios parámetros para ordenar por más de un criterio e indicar el caracter - delante par que el orden sea descendente.
         * 
         * Por ejemplo, para ordenar de forma ascendente por el código de país y descendente por fecha de creación utiliza los parámetros 'sortBy=country&sortBy=-creationDate'
         * 
         * Están disponibles las siguientes opciones de ordenación:
         * 
         * * title: Campo "Mostrar cómo" o "Nombre comercial"
         * * country: Código del país
         * * creationDate: Fecha de creación en el sistema
         * * modificationDate: Fecha de última modificación en el sistema
         */
        /**
         * @description Permite obtener datos adicionales relacionados con el contacto, se pueden indicar tantos valores como sea necesario entre los siguientes:
         *   
         * * receivePaymentMethod: Devuelve en related.objects el objeto que representa el método de cobro por defecto de este contacto (usado en clientes)
         * * sendPaymentMethod: Devuelve en related.objects el objeto que representa el método de pago por defecto de este contacto (usado en proveedores)
         * * paymentMethods: Devuelve en related.paymentMethods lista de los ids de todos los métodos de cobro/pago asociados a este cliente y cada uno de ellos en related.objects
         */
      query?: {
        country?: string;
        search?: string;
        fiscalId?: string;
        vatEU?: string;
        isClient?: boolean;
        isProvider?: boolean;
        isEmployee?: boolean;
        sortBy?: ("title" | "-title" | "country" | "-country" | "creationDate" | "-creationDate" | "modificationDate" | "-modificationDate")[];
        related?: ("receivePaymentMethod" | "sendPaymentMethod" | "paymentMethods")[];
      };
    };
    responses: {
      /** @description Lista de contactos */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            /** Items */
            items: (components["schemas"]["ContactResponse"])[];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  createContact: {
    /**
     * Crear contacto 
     * @description Crea un nuevo contacto
     */
    /** @description Contenido del contacto a crear */
    requestBody: {
      content: {
        "application/json": {
          content: components["schemas"]["ContactWrite"];
        };
      };
    };
    responses: {
      /** @description Resultado de la creación del contacto */
      200: {
        content: {
          "application/json": {
            content: components["schemas"]["Contact"];
            creationDate: components["schemas"]["CreationDate"];
            modificationDate: components["schemas"]["ModificationDate"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getContact: {
    /**
     * Obtener un contacto 
     * @description Obtiene el contenido de un contacto
     */
    parameters: {
        /**
         * @description Permite obtener datos adicionales relacionados con el contacto, se pueden indicar tantos valores como sea necesario entre los siguientes:
         *   
         * * receivePaymentMethod: Devuelve en related.objects el objeto que representa el método de cobro por defecto de este contacto (usado en clientes)
         * * sendPaymentMethod: Devuelve en related.objects el objeto que representa el método de pago por defecto de este contacto (usado en proveedores)
         * * paymentMethods: Devuelve en related.paymentMethods lista de los ids de todos los métodos de cobro/pago asociados a este cliente y cada uno de ellos en related.objects
         */
      query?: {
        related?: ("receivePaymentMethod" | "sendPaymentMethod" | "paymentMethods")[];
      };
        /** @description ID  del contacto. Formado por el prefjo "con_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Contenido del contacto solicitado */
      200: {
        content: {
          "application/json": components["schemas"]["ContactResponse"];
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  updateContact: {
    /**
     * Actualizar contacto 
     * @description Actualiza un contacto existente
     */
    parameters: {
        /** @description ID  del contacto. Formado por el prefjo "con_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    /** @description Contenido del contacto s crear */
    requestBody: {
      content: {
        "application/json": {
          content: components["schemas"]["ContactWrite"];
        };
      };
    };
    responses: {
      /** @description Resultado de la actualización del contacto */
      200: {
        content: {
          "application/json": {
            content: components["schemas"]["Contact"];
            creationDate: components["schemas"]["CreationDate"];
            modificationDate: components["schemas"]["ModificationDate"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  deleteContact: {
    /**
     * Borrar contacto 
     * @description Elimina un contacto existente
     */
    parameters: {
        /** @description ID  del contacto. Formado por el prefjo "con_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    responses: {
      200: components["responses"]["DeleteResponse"];
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getProducts: {
    /**
     * Lista de productos 
     * @description Devuelve una lista de productos
     */
    parameters?: {
        /** @description Búsqueda aproximada por nombre */
        /** @description Código de producto (SKU) */
        /** @description Producto de venta */
        /** @description Búsqueda aproximada por descripción de venta */
        /** @description Producto de compra */
        /** @description Búsqueda aproximada por descripción de compra */
        /** @description Bien de inversión */
        /**
         * @description Orden de los resultados
         * 
         * Puedes indicar varios parámetros para ordenar por más de un criterio e indicar el caracter - delante par que el orden sea descendente.
         * 
         * Por ejemplo, para ordenar de forma ascendente por el código de producto y descendente por el nombre utiliza los parámetros 'sortBy=sku&sortBy=-title'
         * 
         * Están disponibles las siguientes opciones de ordenación:
         * 
         * * title: Nombre del producto
         * * sku: Código de producto
         * * salesDescription: Descripción para la venta del producto
         * * purchasesDescription: Descripción para la compra del producto
         * * creationDate: Fecha de creación en el sistema
         * * modificationDate: Fecha de última modificación en el sistema
         */
      query?: {
        title?: string;
        sku?: string;
        isSales?: boolean;
        salesDescription?: string;
        isPurchases?: boolean;
        purchasesDescription?: string;
        isDepreciable?: boolean;
        sortBy?: ("title" | "-title" | "sku" | "-sku" | "salesDescription" | "-salesDescription" | "purchasesDescription" | "-purchasesDescription" | "creationDate" | "-creationDate" | "modificationDate" | "-modificationDate")[];
      };
    };
    responses: {
      /** @description Lista de productos */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            /** Items */
            items: ({
                content: components["schemas"]["Product"];
                creationDate: components["schemas"]["CreationDate"];
                modificationDate: components["schemas"]["ModificationDate"];
              })[];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  createProduct: {
    /**
     * Crear producto 
     * @description Crea un nuevo producto
     */
    /** @description Contenido del producto a crear */
    requestBody: {
      content: {
        "application/json": {
          content: components["schemas"]["ProductWrite"];
        };
      };
    };
    responses: {
      /** @description Resultado de la creación del producto */
      200: {
        content: {
          "application/json": {
            content: components["schemas"]["Product"];
            creationDate: components["schemas"]["CreationDate"];
            modificationDate: components["schemas"]["ModificationDate"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getProduct: {
    /**
     * Obtener un producto 
     * @description Obtiene el contenido de un producto
     */
    parameters: {
        /** @description ID  del product. Formado por el prefjo "pro_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Contenido del producto solicitado */
      200: {
        content: {
          "application/json": {
            content: components["schemas"]["Product"];
            creationDate: components["schemas"]["CreationDate"];
            modificationDate: components["schemas"]["ModificationDate"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  updateProduct: {
    /**
     * Actualizar producto 
     * @description Actualiza un producto existente
     */
    parameters: {
        /** @description ID  del product. Formado por el prefjo "pro_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    /** @description Contenido del producto a crear */
    requestBody: {
      content: {
        "application/json": {
          content: components["schemas"]["ProductWrite"];
        };
      };
    };
    responses: {
      /** @description Resultado de la actualización del producto */
      200: {
        content: {
          "application/json": {
            content: components["schemas"]["Product"];
            creationDate: components["schemas"]["CreationDate"];
            modificationDate: components["schemas"]["ModificationDate"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  deleteProduct: {
    /**
     * Borrar producto 
     * @description Elimina un producto existente
     */
    parameters: {
        /** @description ID  del product. Formado por el prefjo "pro_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    responses: {
      200: components["responses"]["DeleteResponse"];
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getInvoices: {
    /**
     * Lista de facturas 
     * @description Devuelve una lista de facturas
     */
    parameters?: {
        /**
         * @description Fecha mínima de la factura en formato YYYY-MM-DD.
         * 
         * Se incluirán en los resultados facturas con fecha mayor o igual al valor indicado
         */
        /**
         * @description Fecha máxima de la factura en formato YYYY-MM-DD.
         * 
         * Se incluirán en los resultados facturas con fecha menor o igual al valor indicado
         */
        /** @description Serie de la factura sin aplicar posibles formatos de año (\#\# ó \#\#\#\#) */
        /** @description Serie de la factura */
        /**
         * @description Número secuencial mínimo de la factura.
         *             
         * Se incluirán en los resultados facturas con número secuencial mayor o igual al valor indicado
         */
        /**
         * @description Número secuencial máximo de la factura.
         *             
         * Se incluirán en los resultados facturas con número secuencial menor o igual al valor indicado
         */
        /** @description Cliente de la factura */
        /** @description Factura con contacto, utiliza el valor 'false' para obtener las facturas simplificadas */
        /** @description Importe total mínimo de la factura */
        /** @description Importe total máxima de la factura */
        /** @description Moneda de la factura (Formato ISO 4217) */
        /**
         * @description Comportamiento de las facturas provisionales. Si no se indica nada se incluirán solo las facturas definitivas.
         * 
         * * only: Se incluirán solo las facturas provisionales
         * * all: Se incluirán todas las facturas (definitivas y provisionales)
         */
        /** @description País de la dirección de facturación (Formato ISO 3166-1 Alpha-2) */
        /**
         * @description Listado de todas las etiquetas que debe contener la factura para ser incluida en los resultados.
         *       
         * Repite el parámetro tantas veces como etiquetas quieras incluir.
         */
        /**
         * @description Listado de cualquiera de las etiquetas que debe contener la factura para ser incluida en los resultados.
         *       
         * Repite el parámetro tantas veces como etiquetas quieras incluir.
         */
        /** @description Indicar este parámetro con valor 'true' para recibir solo facturas que no tengan ninguna etiqueta */
        /**
         * @description Orden de los resultados
         * 
         * Puedes indicar varios parámetros para ordenar por más de un criterio e indicar el caracter - delante par que el orden sea descendente.
         * 
         * Por ejemplo, para ordenar de forma descendente por fecha y luego por moneda utiliza los parámetros 'sortBy=-date&sortBy=currency'
         * 
         * Están disponibles las siguientes opciones de ordenación:
         * 
         * * date: Fecha de factura
         * * series: Serie de la factura sin aplicar posibles formatos de año (\#\# ó \#\#\#\#)
         * * formattedSeries: Serie de la factura
         * * number: Número secuencial mínimo de la factura 
         * * total: Importe total de la factura
         * * currency: Moneda de la factura
         * * country: País de la dirección fiscal de la factura
         * * creationDate: Fecha de creación en el sistema
         * * modificationDate: Fecha de última modificación en el sistema
         */
        /**
         * @description Permite obtener datos adicionales relacionados con la factura, se pueden indicar tantos valores como sea necesario entre los siguientes:
         *   
         * * taxIds: Devuelve en related.objects detalles de las definiciones de los impuestos incluidos en la factura
         * * balance: Devuelve en related.balance detalle del saldo pendiente de la factura
         */
      query?: {
        minDate?: string;
        maxDate?: string;
        series?: string;
        formattedSeries?: string;
        minNumber?: number;
        maxNumber?: number;
        contact?: (string)[];
        hasContact?: boolean;
        minTotal?: number;
        maxTotal?: number;
        currency?: string;
        draft?: "only" | "all";
        country?: string;
        allTheseTags?: (string)[];
        anyOfTheseTags?: (string)[];
        hasTags?: boolean;
        sortBy?: ("date" | "-date" | "series" | "-series" | "formattedSeries" | "-formattedSeries" | "number" | "-number" | "total" | "-total" | "currency" | "-currency" | "country" | "-country" | "creationDate" | "-creationDate" | "modificationDate" | "-modificationDate")[];
        related?: ("taxIds" | "balance")[];
      };
    };
    responses: {
      /** @description Lista de facturas */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            /** Items */
            items: (components["schemas"]["InvoiceResponse"])[];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  createInvoice: {
    /**
     * Crear factura 
     * @description Crea una nueva factura
     */
    /** @description Contenido de la factura a crear */
    requestBody: {
      content: {
        "application/json": {
          content: components["schemas"]["InvoiceWrite"];
          tags?: components["schemas"]["Tags"];
          /**
           * InvoicePaymentsWrite 
           * @description Permite crear un pago para una factura.
           * 
           * Se pueden crear múltiples pagos e indicar el importe individual para cada uno de ellos.
           * 
           * Si no se indica el importe (amount) se considera que con ese pago se quiere saldar todo el importe pendiente de la factura, dentro del array solo puede haber un pago sin importe y debe estar en la última posición del array
           */
          payments?: ({
              /**
               * Format: date 
               * @description Fecha en la que contabilizar el pago, si no se indica se usa la fecha de la factura
               */
              date?: string;
              /** @description ID del banco en el que se anota el pago */
              bank: string;
              /** @description Importe del pago en la moneda original de la factura. Si no se indica se saldará todo el importe pendiente de la factura */
              amount?: number;
              /** @description Importe a contabilizar en euros, puede indicarse solo cuando la moneda de la factura sea distinta a euros y se quiera indicar el valor exacto a contabilizar de dicho pago en euros. Si no se indica se aplicará un tipo de cambio de forma automática */
              companyCurrencyAmount?: number;
            })[];
        };
      };
    };
    responses: {
      /** @description Resultado de la creación de la factura */
      200: {
        content: {
          "application/json": {
            content: components["schemas"]["Invoice"];
            tags: components["schemas"]["Tags"];
            creationDate: components["schemas"]["CreationDate"];
            modificationDate: components["schemas"]["ModificationDate"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getInvoice: {
    /**
     * Obtener una factura 
     * @description Obtiene el contenido de una factura
     */
    parameters: {
        /**
         * @description Permite obtener datos adicionales relacionados con la factura, se pueden indicar tantos valores como sea necesario entre los siguientes:
         *   
         * * taxIds: Devuelve en related.objects detalles de las definiciones de los impuestos incluidos en la factura
         * * balance: Devuelve en related.balance detalle del saldo pendiente de la factura
         */
      query?: {
        related?: ("taxIds" | "balance")[];
      };
        /** @description ID  de la factura. Formado por el prefjo "inv_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Contenido de la factura solicitada */
      200: {
        content: {
          "application/json": components["schemas"]["InvoiceResponse"];
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  updateInvoice: {
    /**
     * Actualizar factura 
     * @description Actualiza una factura existente
     */
    parameters: {
        /** @description ID  de la factura. Formado por el prefjo "inv_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    /** @description Contenido de la factura a crear */
    requestBody: {
      content: {
        "application/json": {
          content: components["schemas"]["InvoiceWrite"];
          tags?: components["schemas"]["Tags"];
          tagsOperation?: components["schemas"]["TagsOperation"];
        };
      };
    };
    responses: {
      /** @description Resultado de la actualización de la factura */
      200: {
        content: {
          "application/json": {
            content: components["schemas"]["Invoice"];
            tags: components["schemas"]["Tags"];
            creationDate: components["schemas"]["CreationDate"];
            modificationDate: components["schemas"]["ModificationDate"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  deleteInvoice: {
    /**
     * Borrar factura 
     * @description Elimina una factura existente
     */
    parameters: {
        /** @description ID  de la factura. Formado por el prefjo "inv_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    responses: {
      200: components["responses"]["DeleteResponse"];
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  updateInvoiceTags: {
    /**
     * Actualizar etiquetas de factura 
     * @description Actualiza las etiquetas de una factura existente
     */
    parameters: {
        /** @description ID  de la factura. Formado por el prefjo "inv_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    /** @description Especificación de las etiquetas a modificar */
    requestBody: {
      content: {
        "application/json": {
          tags: components["schemas"]["Tags"];
          tagsOperation: components["schemas"]["TagsOperation"];
        };
      };
    };
    responses: {
      /** @description Resultado de la actualización de las etiquetas de la factura */
      200: {
        content: {
          "application/json": {
            tags: components["schemas"]["Tags"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  sendInvoice: {
    /**
     * Enviar factura por correo electrónico 
     * @description Envía la factura por correo electrónico con destinatarios, título y contenido obtenidos de su plantilla o bien valores personalizados indicados en la llamada
     */
    parameters: {
        /** @description ID  de la factura. Formado por el prefjo "inv_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    requestBody: components["requestBodies"]["SendInvoiceRequest"];
    responses: {
      200: components["responses"]["SendInvoiceResponse"];
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  createInvoicePDF: {
    /**
     * Generar la factura en formato PDF 
     * @description Solicita la generación del documento en formato PDF. Se devuelve una URL temporal desde la que poder descargar el documento en formato PDF
     */
    parameters: {
        /** @description ID  de la factura. Formado por el prefjo "inv_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    requestBody: components["requestBodies"]["CreateDocumentPDFRequest"];
    responses: {
      200: components["responses"]["GetDocumentPDFResponse"];
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  createInvoiceFacturae: {
    /**
     * Generar la factura en formato facturae 
     * @description Solicita la generación del documento en formato facturae.
     *         
     * Se devuelve una URL desde la que poder descargar el documento en formato facturae.
     * 
     * El documento en formato facturae se generará en el momento solo si aún no ha sido generado o si ha habido cambios en el documento original desde la última vez que se creó en el formato indicado.
     */
    parameters: {
        /** @description ID  de la factura. Formado por el prefjo "inv_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @enum {string} */
          version: "3.2.1";
        };
      };
    };
    responses: {
      /** @description Resultado de la petición de obtención de la factura en formato facturae */
      200: {
        content: {
          "application/json": {
            /** @description URL desde la que descargar o visualizar el archivo solicitado. */
            url: string;
            /** @description Nombre del archivo facturae generado. Este nombre es el que enviará el servidor a través de la cabecera Content-Disposition si se intenta descargar el documento. */
            filename: string;
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getEstimates: {
    /**
     * Lista de presupuestos 
     * @description Devuelve una lista de presupuestos
     */
    parameters?: {
        /**
         * @description Fecha mínima del presupuesto en formato YYYY-MM-DD.
         * 
         * Se incluirán en los resultados presupuestos con fecha mayor o igual al valor indicado
         */
        /**
         * @description Fecha máxima del presupuesto en formato YYYY-MM-DD.
         * 
         * Se incluirán en los resultados presupuestos con fecha menor o igual al valor indicado
         */
        /** @description Serie del presupuesto sin aplicar posibles formatos de año (\#\# ó \#\#\#\#) */
        /** @description Serie del presupuesto */
        /**
         * @description Número secuencial mínimo del presupuesto
         *             
         * Se incluirán en los resultados presupuestos con número secuencial mayor o igual al valor indicado
         */
        /**
         * @description Número secuencial máximo del presupuesto.
         *             
         * Se incluirán en los resultados presupuestos con número secuencial menor o igual al valor indicado
         */
        /** @description Cliente del presupuesto */
        /** @description Presupuesto con contacto, utiliza el valor 'false' para obtener presupuestos sin contacto asociado */
        /** @description Importe total mínimo del presupuesto */
        /** @description Importe total máxima del presupuesto */
        /** @description Moneda del presupuesto (Formato ISO 4217) */
        /** @description País de la dirección de facturación (Formato ISO 3166-1 Alpha-2) */
        /**
         * @description Listado de todas las etiquetas que debe contener el presupuestos para ser incluido en los resultados.
         * 
         * Repite el parámetro tantas veces como etiquetas quieras incluir.
         */
        /**
         * @description Listado de cualquiera de las etiquetas que debe contener el presupuestos para ser incluido en los resultados.
         * 
         * Repite el parámetro tantas veces como etiquetas quieras incluir.
         */
        /** @description Indicar este parámetro con valor 'true' para recibir solo presupuestos que no tengan ninguna etiqueta */
        /**
         * @description Orden de los resultados
         * 
         * Puedes indicar varios parámetros para ordenar por más de un criterio e indicar el caracter - delante par que el orden sea descendente.
         * 
         * Por ejemplo, para ordenar de forma descendente por fecha y luego por moneda utiliza los parámetros 'sortBy=-date&sortBy=currency'
         * 
         * Están disponibles las siguientes opciones de ordenación:
         * 
         * * date: Fecha de presupuesto
         * * series: Serie del presupuesto sin aplicar posibles formatos de año (\#\# ó \#\#\#\#)
         * * formattedSeries: Serie del presupuesto
         * * number: Número secuencial mínimo del presupuesto 
         * * total: Importe total del presupuesto
         * * currency: Moneda del presupuesto
         * * country: País de la dirección fiscal del presupuesto
         * * creationDate: Fecha de creación en el sistema
         * * modificationDate: Fecha de última modificación en el sistema
         */
        /**
         * @description Permite obtener datos adicionales relacionados con el presupuesto, se pueden indicar tantos valores como sea necesario entre los siguientes:
         *   
         * * taxIds: Devuelve en related.objects detalles de las definiciones de los impuestos incluidos en el presupuesto
         */
      query?: {
        minDate?: string;
        maxDate?: string;
        series?: string;
        formattedSeries?: string;
        minNumber?: number;
        maxNumber?: number;
        contact?: (string)[];
        hasContact?: boolean;
        minTotal?: number;
        maxTotal?: number;
        currency?: string;
        country?: string;
        allTheseTags?: (string)[];
        anyOfTheseTags?: (string)[];
        hasTags?: boolean;
        sortBy?: ("date" | "-date" | "series" | "-series" | "formattedSeries" | "-formattedSeries" | "number" | "-number" | "total" | "-total" | "currency" | "-currency" | "country" | "-country" | "creationDate" | "-creationDate" | "modificationDate" | "-modificationDate")[];
        related?: ("taxIds")[];
      };
    };
    responses: {
      /** @description Lista de presupuestos */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            /** Items */
            items: (components["schemas"]["EstimateResponse"])[];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  createEstimate: {
    /**
     * Crear presupuesto 
     * @description Crea un nuevo presupuesto
     */
    /** @description Contenido del presupuesto a crear */
    requestBody: {
      content: {
        "application/json": {
          content: components["schemas"]["EstimateWrite"];
          tags?: components["schemas"]["Tags"];
        };
      };
    };
    responses: {
      /** @description Resultado de la creación del presupuesto */
      200: {
        content: {
          "application/json": {
            content: components["schemas"]["Estimate"];
            tags: components["schemas"]["Tags"];
            creationDate: components["schemas"]["CreationDate"];
            modificationDate: components["schemas"]["ModificationDate"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getEstimate: {
    /**
     * Obtener un presupuesto 
     * @description Obtiene el contenido de un presupuesto
     */
    parameters: {
        /**
         * @description Permite obtener datos adicionales relacionados con el presupuesto, se pueden indicar tantos valores como sea necesario entre los siguientes:
         *   
         * * taxIds: Devuelve en related.objects detalles de las definiciones de los impuestos incluidos en el presupuesto
         */
      query?: {
        related?: ("taxIds")[];
      };
        /** @description ID  del presupuesto. Formado por el prefjo "est_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Contenido del presupuesto solicitado */
      200: {
        content: {
          "application/json": components["schemas"]["EstimateResponse"];
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  updateEstimate: {
    /**
     * Actualizar presupuesto 
     * @description Actualiza un presupuesto existente
     */
    parameters: {
        /** @description ID  del presupuesto. Formado por el prefjo "est_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    /** @description Contenido del presupuesto a crear */
    requestBody: {
      content: {
        "application/json": {
          content: components["schemas"]["EstimateWrite"];
          tags?: components["schemas"]["Tags"];
          tagsOperation?: components["schemas"]["TagsOperation"];
        };
      };
    };
    responses: {
      /** @description Resultado de la actualización del presupuesto */
      200: {
        content: {
          "application/json": {
            content: components["schemas"]["Estimate"];
            tags: components["schemas"]["Tags"];
            creationDate: components["schemas"]["CreationDate"];
            modificationDate: components["schemas"]["ModificationDate"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  deleteEstimate: {
    /**
     * Borrar presupuesto 
     * @description Elimina un presupuesto existente
     */
    parameters: {
        /** @description ID  del presupuesto. Formado por el prefjo "est_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    responses: {
      200: components["responses"]["DeleteResponse"];
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  updateEstimateTags: {
    /**
     * Actualizar etiquetas de presupuesto 
     * @description Actualiza las etiquetas de un presupuesto existente
     */
    parameters: {
        /** @description ID  del presupuesto. Formado por el prefjo "est_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    /** @description Especificación de las etiquetas a modificar */
    requestBody: {
      content: {
        "application/json": {
          tags: components["schemas"]["Tags"];
          tagsOperation: components["schemas"]["TagsOperation"];
        };
      };
    };
    responses: {
      /** @description Resultado de la actualización de las etiquetas del presupuesto */
      200: {
        content: {
          "application/json": {
            tags: components["schemas"]["Tags"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  sendEstimate: {
    /**
     * Enviar presupuesto por correo electrónico 
     * @description Envía el presupuesto por correo electrónico con destinatarios, título y contenido obtenidos de su plantilla o bien valores personalizados indicados en la llamada
     */
    parameters: {
        /** @description ID  del presupuesto. Formado por el prefjo "est_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    requestBody: components["requestBodies"]["SendDocumentRequest"];
    responses: {
      200: components["responses"]["SendDocumentResponse"];
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  createEstimatePDF: {
    /**
     * Generar el presupuesto en formato PDF 
     * @description Solicita la generación del documento en formato PDF. Se devuelve una URL temporal desde la que poder descargar el documento en formato PDF
     */
    parameters: {
        /** @description ID  del presupuesto. Formado por el prefjo "est_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    requestBody: components["requestBodies"]["CreateDocumentPDFRequest"];
    responses: {
      200: components["responses"]["GetDocumentPDFResponse"];
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getDeliveryNotes: {
    /**
     * Lista de albaranes 
     * @description Devuelve una lista de albaranes
     */
    parameters?: {
        /**
         * @description Fecha mínima del albarán en formato YYYY-MM-DD.
         * 
         * Se incluirán en los resultados albaranes con fecha mayor o igual al valor indicado
         */
        /**
         * @description Fecha máxima del albarán en formato YYYY-MM-DD.
         * 
         * Se incluirán en los resultados albaranes con fecha menor o igual al valor indicado
         */
        /** @description Serie del albarán sin aplicar posibles formatos de año (\#\# ó \#\#\#\#) */
        /** @description Serie del albarán */
        /**
         * @description Número secuencial mínimo del albarán
         *             
         * Se incluirán en los resultados albaranes con número secuencial mayor o igual al valor indicado
         */
        /**
         * @description Número secuencial máximo del albarán.
         *             
         * Se incluirán en los resultados albaranes con número secuencial menor o igual al valor indicado
         */
        /** @description Cliente del albarán */
        /** @description Albarán con contacto, utiliza el valor 'false' para obtener albaranes sin contacto asociado */
        /** @description Importe total mínimo del albarán */
        /** @description Importe total máxima del albarán */
        /** @description Moneda del albarán (Formato ISO 4217) */
        /** @description País de la dirección de facturación (Formato ISO 3166-1 Alpha-2) */
        /**
         * @description Listado de todas las etiquetas que debe contener el albarán para ser incluido en los resultados.
         * 
         * Repite el parámetro tantas veces como etiquetas quieras incluir.
         */
        /**
         * @description Listado de cualquiera de las etiquetas que debe contener el albarán para ser incluido en los resultados.
         * 
         * Repite el parámetro tantas veces como etiquetas quieras incluir.
         */
        /** @description Indicar este parámetro con valor 'true' para recibir solo albaraanes que no tengan ninguna etiqueta */
        /**
         * @description Orden de los resultados
         * 
         * Puedes indicar varios parámetros para ordenar por más de un criterio e indicar el caracter - delante par que el orden sea descendente.
         * 
         * Por ejemplo, para ordenar de forma descendente por fecha y luego por moneda utiliza los parámetros 'sortBy=-date&sortBy=currency'
         * 
         * Están disponibles las siguientes opciones de ordenación:
         * 
         * * date: Fecha de albarán
         * * series: Serie del albarán sin aplicar posibles formatos de año (\#\# ó \#\#\#\#)
         * * formattedSeries: Serie del albarán
         * * number: Número secuencial mínimo del albarán 
         * * total: Importe total del albarán
         * * currency: Moneda del albarán
         * * country: País de la dirección fiscal del albarán
         * * creationDate: Fecha de creación en el sistema
         * * modificationDate: Fecha de última modificación en el sistema
         */
        /**
         * @description Permite obtener datos adicionales relacionados con el albarán, se pueden indicar tantos valores como sea necesario entre los siguientes:
         *   
         * * taxIds: Devuelve en related.objects detalles de las definiciones de los impuestos incluidos en el albarán
         */
      query?: {
        minDate?: string;
        maxDate?: string;
        series?: string;
        formattedSeries?: string;
        minNumber?: number;
        maxNumber?: number;
        contact?: (string)[];
        hasContact?: boolean;
        minTotal?: number;
        maxTotal?: number;
        currency?: string;
        country?: string;
        allTheseTags?: (string)[];
        anyOfTheseTags?: (string)[];
        hasTags?: boolean;
        sortBy?: ("date" | "-date" | "series" | "-series" | "formattedSeries" | "-formattedSeries" | "number" | "-number" | "total" | "-total" | "currency" | "-currency" | "country" | "-country" | "creationDate" | "-creationDate" | "modificationDate" | "-modificationDate")[];
        related?: ("taxIds")[];
      };
    };
    responses: {
      /** @description Lista de albaranes */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            /** Items */
            items: (components["schemas"]["DeliveryNoteResponse"])[];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  createDeliveryNote: {
    /**
     * Crear albarán 
     * @description Crea un nuevo albarán
     */
    /** @description Contenido del albarán a crear */
    requestBody: {
      content: {
        "application/json": {
          content: components["schemas"]["DeliveryNoteWrite"];
          tags?: components["schemas"]["Tags"];
        };
      };
    };
    responses: {
      /** @description Resultado de la creación del albarán */
      200: {
        content: {
          "application/json": {
            content: components["schemas"]["DeliveryNote"];
            tags: components["schemas"]["Tags"];
            creationDate: components["schemas"]["CreationDate"];
            modificationDate: components["schemas"]["ModificationDate"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getDeliveryNote: {
    /**
     * Obtener un albarán 
     * @description Obtiene el contenido de un albarán
     */
    parameters: {
        /**
         * @description Permite obtener datos adicionales relacionados con el albarán, se pueden indicar tantos valores como sea necesario entre los siguientes:
         *   
         * * taxIds: Devuelve en related.objects detalles de las definiciones de los impuestos incluidos en el albarán
         */
      query?: {
        related?: ("taxIds")[];
      };
        /** @description ID  del albarán. Formado por el prefjo "est_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Contenido del albarán solicitado */
      200: {
        content: {
          "application/json": components["schemas"]["DeliveryNoteResponse"];
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  updateDeliveryNote: {
    /**
     * Actualizar albarán 
     * @description Actualiza un albarán existente
     */
    parameters: {
        /** @description ID  del albarán. Formado por el prefjo "est_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    /** @description Contenido del albarán a crear */
    requestBody: {
      content: {
        "application/json": {
          content: components["schemas"]["DeliveryNoteWrite"];
          tags?: components["schemas"]["Tags"];
          tagsOperation?: components["schemas"]["TagsOperation"];
        };
      };
    };
    responses: {
      /** @description Resultado de la actualización del albarán */
      200: {
        content: {
          "application/json": {
            content: components["schemas"]["DeliveryNote"];
            tags: components["schemas"]["Tags"];
            creationDate: components["schemas"]["CreationDate"];
            modificationDate: components["schemas"]["ModificationDate"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  deleteDeliveryNote: {
    /**
     * Borrar albarán 
     * @description Elimina un albarán existente
     */
    parameters: {
        /** @description ID  del albarán. Formado por el prefjo "est_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    responses: {
      200: components["responses"]["DeleteResponse"];
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  updateDeliveryNoteTags: {
    /**
     * Actualizar etiquetas de albarán 
     * @description Actualiza las etiquetas de un albarán existente
     */
    parameters: {
        /** @description ID  del albarán. Formado por el prefjo "est_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    /** @description Especificación de las etiquetas a modificar */
    requestBody: {
      content: {
        "application/json": {
          tags: components["schemas"]["Tags"];
          tagsOperation: components["schemas"]["TagsOperation"];
        };
      };
    };
    responses: {
      /** @description Resultado de la actualización de las etiquetas del albarán */
      200: {
        content: {
          "application/json": {
            tags: components["schemas"]["Tags"];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  sendDeliveryNote: {
    /**
     * Enviar albarán por correo electrónico 
     * @description Envía el albarán por correo electrónico con destinatarios, título y contenido obtenidos de su plantilla o bien valores personalizados indicados en la llamada
     */
    parameters: {
        /** @description ID  del albarán. Formado por el prefjo "est_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    requestBody: components["requestBodies"]["SendDocumentRequest"];
    responses: {
      200: components["responses"]["SendDocumentResponse"];
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      409: components["responses"]["ConflictError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  createDeliveryNotePDF: {
    /**
     * Generar el albarán en formato PDF 
     * @description Solicita la generación del documento en formato PDF. Se devuelve una URL temporal desde la que poder descargar el documento en formato PDF
     */
    parameters: {
        /** @description ID  de la factura. Formado por el prefjo "inv_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    requestBody: components["requestBodies"]["CreateDocumentPDFRequest"];
    responses: {
      200: components["responses"]["GetDocumentPDFResponse"];
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getBills: {
    /**
     * Lista de facturas de compra o tickets 
     * @description Devuelve una lista de facturas de compra o tickets
     */
    parameters?: {
        /**
         * @description Fecha mínima de registro de la factura de compra o ticket en formato YYYY-MM-DD.
         * 
         * Se incluirán en los resultados facturas de compra o tickets con fecha de registro mayor o igual al valor indicado
         */
        /**
         * @description Fecha máxima de registro de la factura de compra o ticket en formato YYYY-MM-DD.
         * 
         * Se incluirán en los resultados facturas de compra o tickets con fecha de registro menor o igual al valor indicado
         */
        /** @description Proveedor de la factura */
        /** @description Factura de compra con contacto, utiliza el valor 'false' para obtener las facturas de compra o tickets sin proveedor asociado */
        /** @description Importe total mínimo de la factura de compra o ticket */
        /** @description Importe total máxima de la factura de compra o ticket */
        /** @description Moneda de la factura de compra o ticket (Formato ISO 4217) */
        /** @description País de la dirección fiscal del proveedor (Formato ISO 3166-1 Alpha-2) */
        /**
         * @description Listado de todas las etiquetas que debe contener la factura de compra o ticket para ser incluido en los resultados.
         * 
         * Repite el parámetro tantas veces como etiquetas quieras incluir.
         */
        /**
         * @description Listado de cualquiera de las etiquetas que debe contener la factura de compra o ticket para ser incluido en los resultados.
         * 
         * Repite el parámetro tantas veces como etiquetas quieras incluir.
         */
        /** @description Indicar este parámetro con valor 'true' para recibir solo facturas de compra o tickets que no tengan ninguna etiqueta */
        /**
         * @description Orden de los resultados
         * 
         * Puedes indicar varios parámetros para ordenar por más de un criterio e indicar el caracter - delante par que el orden sea descendente.
         * 
         * Por ejemplo, para ordenar de forma descendente por fecha y luego por moneda utiliza los parámetros 'sortBy=-date&sortBy=currency'
         * 
         * Están disponibles las siguientes opciones de ordenación:
         * 
         * * date: Fecha de registro de la factura de compra o ticket
         * * total: Importe total de la factura de compra o ticket
         * * currency: Moneda de la factura de compra o ticket
         * * country: País de la dirección fiscal de la factura de compra o ticket
         * * creationDate: Fecha de creación en el sistema
         * * modificationDate: Fecha de última modificación en el sistema
         */
        /**
         * @description Permite obtener datos adicionales relacionados con la factura de compra o ticket, se pueden indicar tantos valores como sea necesario entre los siguientes:
         *   
         * * taxIds: Devuelve en related.objects detalles de las definiciones de los impuestos incluidos en la factura de compra o ticket
         */
      query?: {
        minDate?: string;
        maxDate?: string;
        contact?: (string)[];
        hasContact?: boolean;
        minTotal?: number;
        maxTotal?: number;
        currency?: string;
        country?: string;
        allTheseTags?: (string)[];
        anyOfTheseTags?: (string)[];
        hasTags?: boolean;
        sortBy?: ("date" | "-date" | "total" | "-total" | "currency" | "-currency" | "country" | "-country" | "creationDate" | "-creationDate" | "modificationDate" | "-modificationDate")[];
        related?: ("taxIds")[];
      };
    };
    responses: {
      /** @description Lista de facturas de compra o tickets */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            /** Items */
            items: (components["schemas"]["BillResponse"])[];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getBill: {
    /**
     * Obtener una factura de compra o ticket 
     * @description Obtiene el contenido de una factura de compra o ticket
     */
    parameters: {
        /**
         * @description Permite obtener datos adicionales relacionados con la factura de compra o ticket, se pueden indicar tantos valores como sea necesario entre los siguientes:
         *   
         * * taxIds: Devuelve en related.objects detalles de las definiciones de los impuestos incluidos en la factura de compra o ticket
         */
      query?: {
        related?: ("taxIds")[];
      };
        /** @description ID  de la factura de compra o ticket. Formado por el prefjo "bil_"  y un uuid v4 */
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Contenido de la factura de compra o ticket solicitada */
      200: {
        content: {
          "application/json": components["schemas"]["BillResponse"];
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      404: components["responses"]["NotFoundError"];
      500: components["responses"]["InternalServerError"];
    };
  };
  getBanks: {
    /**
     * Lista de bancos 
     * @description Devuelve una lista de los bancos y cuentas de tesorería disponibles en la empresa
     */
    parameters?: {
        /** @description Moneda del banco (Formato ISO 4217) */
        /**
         * @description Orden de los resultados
         * 
         * Puedes indicar varios parámetros para ordenar por más de un criterio e indicar el caracter - delante par que el orden sea descendente.
         * 
         * Por ejemplo, para ordenar de forma descendente por título y luego por fecha de creación descendente utiliza los parámetros 'sortBy=title&sortBy=-creationDate'
         * 
         * Están disponibles las siguientes opciones de ordenación:
         * 
         * * title: Título del banco
         * * currency: Moneda del banco
         * * creationDate: Fecha de creación en el sistema
         * * modificationDate: Fecha de última modificación en el sistema
         */
      query?: {
        currency?: string;
        sortBy?: ("title" | "-title" | "currency" | "-currency" | "creationDate" | "-creationDate" | "modificationDate" | "-modificationDate")[];
      };
    };
    responses: {
      /** @description Lista de bancos */
      200: {
        content: {
          "application/json": {
            pagination: components["schemas"]["Pagination"];
            /** Items */
            items: (components["schemas"]["BankResponse"])[];
          };
        };
      };
      400: components["responses"]["BadRequestError"];
      401: components["responses"]["UnauthorizedError"];
      403: components["responses"]["ForbiddenError"];
      500: components["responses"]["InternalServerError"];
    };
  };
}
